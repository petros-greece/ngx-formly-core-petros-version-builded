{"version":3,"sources":["../../../../node_modules/tslib/tslib.es6.js","ng://@ngx-formly/core/lib/utils.ts","ng://@ngx-formly/core/lib/services/formly.config.ts","ng://@ngx-formly/core/lib/services/formly.builder.ts","ng://@ngx-formly/core/lib/components/formly.form.ts","ng://@ngx-formly/core/lib/components/formly.field.ts","ng://@ngx-formly/core/lib/templates/formly.attributes.ts","ng://@ngx-formly/core/lib/templates/field.type.ts","ng://@ngx-formly/core/lib/templates/formly.group.ts","ng://@ngx-formly/core/lib/templates/formly.validation-message.ts","ng://@ngx-formly/core/lib/extensions/field-form/utils.ts","ng://@ngx-formly/core/lib/templates/field-array.type.ts","ng://@ngx-formly/core/lib/templates/field.wrapper.ts","ng://@ngx-formly/core/lib/templates/field-template.type.ts","ng://@ngx-formly/core/lib/extensions/field-expression/utils.ts","ng://@ngx-formly/core/lib/extensions/field-expression/field-expression.ts","ng://@ngx-formly/core/lib/extensions/field-validation/field-validation.ts","ng://@ngx-formly/core/lib/extensions/field-form/field-form.ts","ng://@ngx-formly/core/lib/extensions/core/core.ts","ng://@ngx-formly/core/lib/core.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__rest","e","indexOf","getOwnPropertySymbols","propertyIsEnumerable","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__param","paramIndex","decorator","__metadata","metadataKey","metadataValue","metadata","__values","o","Symbol","iterator","m","next","value","done","TypeError","__read","ar","push","error","__spread","concat","getFieldId","formId","field","index","id","type","template","join","getKeyPath","_keyPath","replace","defineHiddenProp","path","split","slice","FORMLY_VALIDATORS","assignFieldValue","autoClear","paths","parent","undefined","formControl","k","pop","reduce","model","isObject","test","clone","assignModelValue","getFieldValue","_b","_c","reverseDeepMerge","dest","args","_i","forEach","src","srcArg","isNil","isBlankString","objAndSameType","isUndefined","isFunction","obj1","obj2","getPrototypeOf","isArray","x","isObservable","changingThisBreaksApplicationSecurity","name","_isAMomentObject","AbstractControl","Date","getTime","map","v","proto","keys","newVal","prop","propDesc","get","defaultValue","enumerable","writable","configurable","observeDeep","_a","source","setFn","observers","unsubscribe","observer","observe","firstChange","currentValue","splice","_observers","onChange","state","set","previousValue_1","changeFn","previousValue","setValue","filter","reduceFormUpdateValidityCalls","form","action","updateValidity","_updateTreeValidity","bind","updateValidityArgs","FORMLY_CONFIG","InjectionToken","FormlyConfig","types","validators","wrappers","messages","extras","checkExpressionOn","showError","invalid","touched","options","parentForm","submitted","validation","show","extensions","addConfig","config","_this","setType","validator","setValidator","wrapper","setWrapper","validationMessages","addValidatorMessage","message","extension","option","setTypeWrapper","getType","Error","mergeExtendedType","getMergedField","defaultOptions","extendDefaults","extends","optionsTypes","componentRef","resolveFieldTypeRef","instance","component","_resolver","_injector","resolveComponentFactory","getWrapper","getValidator","getValidatorMessage","extendedType","Injectable","providedIn","FormlyFormBuilder","resolver","injector","buildForm","fieldGroup","build","core","_build","_setOptions","checkExpressions","detectChanges","getExtensions","prePopulate","onPopulate","f","postPopulate","FormGroup","_buildForm","console","warn","ComponentFactoryResolver","Injector","FormGroupDirective","Optional","FormlyForm","builder","ngZone","modelChange","EventEmitter","_modelChangeValue","valueChangesUnsubscribe","setField","ngDoCheck","checkExpressionChange","ngOnChanges","changes","fields","valueChanges","ngOnDestroy","sub","fieldChanges","pipe","switchMap","onStable","asObservable","take","subscribe","runGuarded","emit","immutable","NgZone","Input","Output","Component","selector","providers","changeDetection","ChangeDetectionStrategy","OnPush","FormlyField","renderer","elementRef","hostObservers","componentRefs","hooksObservers","ngAfterContentInit","triggerHook","ngAfterViewInit","ngOnInit","resetRefs","hostObserver","renderField","containerRef","clear","wps_1","ref_1","createComponent","attachComponentRef","viewRef","detach","destroyed","insert","changeDetectorRef","ref","hooks","sub_1","renderHostBinding","_componentRefs","setStyle","nativeElement","setAttribute","subscribes","templateOptions","formState","fieldObserver","control_1","distinctUntilChanged","startWith","_d","modelOptions","updateOn","debounce","default","debounceTime","sub_2","FormControl","patchValue","emitEvent","onlySelf","parsers","parserFn","Renderer2","ElementRef","ViewChild","read","ViewContainerRef","static","FormlyAttributes","_document","uiAttributesCache","uiAttributes","uiEvents","listeners","events","document","listener","eventName","callback","to","listen","attributes","attr","removeAttribute","detachElementRef","attachElementRef","fieldAttrElements","focusObserver","toggleFocus","element","focus","isFocused","activeElement","some","contains","blur","onFocus","$event","onBlur","change","markAsDirty","Inject","DOCUMENT","Directive","host","(focus)","(blur)","FieldType","FormlyGroup","_super","[class]","FormlyValidationMessage","errorMessage$","statusChanges","errorMessage","of","fieldForm","errors","errorPath","asyncValidators","unregisterControl","control","opts","FormArray","key_1","controls","findIndex","updateControl","removeAt","key_2","removeControl","setParent","reset","disabled","registerControl","disabledObserver","disable","enable","registerOnDisabledChange","_hide","setControl","status","updateValueAndValidity","_forEachChild","cb","FieldArrayType","fieldArray","add","initialModel","remove","FieldWrapper","FormlyTemplateType","sanitizer","innerHtml","content","safeHtml","bypassSecurityTrustHtml","DomSanitizer","evalStringExpression","expression","argNames","Function","FieldExpressionExtension","_expressions","expressionProperties","hidden","_hiddenFieldsForCheck","hideExpression","expr","hide","parseExpressions","Observable","subscribe_1","evalExpr","subscription_1","onInit_1","onInit","onDestroy_1","onDestroy","ignoreCache","sort","changeHideState","_checkField","parentExpression","includes","thisArg","argVal","exprValue","JSON","stringify","changeDisabledState","every","lastIndex","FieldValidationExtension","initFieldValidation","getPredefinedFieldValidation","validatorName","wrapNgValidatorFn","VALIDATORS","opt","Validators","compose","required","pattern","minLength","maxLength","min","max","validatorOption","obj","then","handleAsyncResult","handleResult","isValid","ctrl","childCtrl_1","setErrors","childErrors","FieldFormExtension","root","addFormControl","setValidators","findControl","controlOptions","c_1","enabled","asyncValidator","mergeValidators","setAsyncValidators","composeAsync","updateControlValidity","CoreExtension","initRootOptions","getFieldComponentInstance","initFieldOptions","Subject","_markForCheck","ChangeDetectorRef","markForCheck","resetModel","_initialModel","updateInitialValue","label","placeholder","defaultFormlyConfig","FormlyModule","configService","configs","forRoot","ngModule","FormlyModule_1","provide","multi","useFactory","deps","useValue","forChild","NgModule","declarations","exports","imports","CommonModule","paths_1","paths_1_1"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import { FormlyFieldConfig } from './core';\nimport { isObservable } from 'rxjs';\nimport { AbstractControl } from '@angular/forms';\nimport { FormlyFieldConfigCache } from './models';\n\nexport function getFieldId(formId: string, field: FormlyFieldConfig, index: string | number) {\n  if (field.id) {\n    return field.id;\n  }\n  let type = field.type;\n  if (!type && field.template) {\n    type = 'template';\n  }\n  return [formId, type, field.key, index].join('_');\n}\n\nexport function getKeyPath(field: FormlyFieldConfigCache): string[] {\n  if (!field.key) {\n    return [];\n  }\n\n  /* We store the keyPath in the field for performance reasons. This function will be called frequently. */\n  if (!field._keyPath || field._keyPath.key !== field.key) {\n    const key = field.key.indexOf('[') === -1 ? field.key : field.key.replace(/\\[(\\w+)\\]/g, '.$1');\n\n    defineHiddenProp(field, '_keyPath', { key: field.key, path: key.indexOf('.') !== -1 ? key.split('.') : [key] });\n  }\n\n  return field._keyPath.path.slice(0);\n}\n\nexport const FORMLY_VALIDATORS = ['required', 'pattern', 'minLength', 'maxLength', 'min', 'max'];\n\nexport function assignFieldValue(field: FormlyFieldConfigCache, value: any, autoClear = false) {\n  let paths = getKeyPath(field);\n  while (field.parent) {\n    field = field.parent;\n    paths = [...getKeyPath(field), ...paths];\n  }\n\n  if (autoClear && value === undefined && field['autoClear'] && !field.formControl.parent) {\n    const k = paths.pop();\n    const m = paths.reduce((model, path) => model[path] || {}, field.parent.model);\n    delete m[k];\n    return;\n  }\n\n  assignModelValue(field.model, paths, value);\n}\n\nexport function assignModelValue(model: any, paths: string[], value: any) {\n  for (let i = 0; i < paths.length - 1; i++) {\n    const path = paths[i];\n    if (!model[path] || !isObject(model[path])) {\n      model[path] = /^\\d+$/.test(paths[i + 1]) ? [] : {};\n    }\n\n    model = model[path];\n  }\n\n  model[paths[paths.length - 1]] = clone(value);\n}\n\nexport function getFieldInitialValue(field: FormlyFieldConfig) {\n  let value = field.options['_initialModel'];\n  let paths = getKeyPath(field);\n  while (field.parent) {\n    field = field.parent;\n    paths = [...getKeyPath(field), ...paths];\n  }\n\n  for (const path of paths) {\n    if (!value) {\n      return undefined;\n    }\n    value = value[path];\n  }\n\n  return value;\n}\n\nexport function getFieldValue(field: FormlyFieldConfig): any {\n  let model = field.parent ? field.parent.model : field.model;\n  for (const path of getKeyPath(field)) {\n    if (!model) {\n      return model;\n    }\n    model = model[path];\n  }\n\n  return model;\n}\n\nexport function reverseDeepMerge(dest: any, ...args: any[]) {\n  args.forEach((src) => {\n    for (const srcArg in src) {\n      if (isNil(dest[srcArg]) || isBlankString(dest[srcArg])) {\n        dest[srcArg] = clone(src[srcArg]);\n      } else if (objAndSameType(dest[srcArg], src[srcArg])) {\n        reverseDeepMerge(dest[srcArg], src[srcArg]);\n      }\n    }\n  });\n  return dest;\n}\n\n// check a value is null or undefined\nexport function isNil(value: any) {\n  return value == null;\n}\n\nexport function isUndefined(value: any) {\n  return value === undefined;\n}\n\nexport function isBlankString(value: any) {\n  return value === '';\n}\n\nexport function isFunction(value: any) {\n  return typeof value === 'function';\n}\n\nexport function objAndSameType(obj1: any, obj2: any) {\n  return (\n    isObject(obj1) &&\n    isObject(obj2) &&\n    Object.getPrototypeOf(obj1) === Object.getPrototypeOf(obj2) &&\n    !(Array.isArray(obj1) || Array.isArray(obj2))\n  );\n}\n\nexport function isObject(x: any) {\n  return x != null && typeof x === 'object';\n}\n\nexport function isPromise(obj: any): obj is Promise<any> {\n  return !!obj && typeof obj.then === 'function';\n}\n\nexport function clone(value: any): any {\n  if (\n    !isObject(value) ||\n    isObservable(value) ||\n    /* instanceof SafeHtmlImpl */ value.changingThisBreaksApplicationSecurity ||\n    ['RegExp', 'FileList', 'File', 'Blob'].indexOf(value.constructor.name) !== -1\n  ) {\n    return value;\n  }\n\n  // https://github.com/moment/moment/blob/master/moment.js#L252\n  if (value._isAMomentObject && isFunction(value.clone)) {\n    return value.clone();\n  }\n\n  if (value instanceof AbstractControl) {\n    return null;\n  }\n\n  if (value instanceof Date) {\n    return new Date(value.getTime());\n  }\n\n  if (Array.isArray(value)) {\n    return value.slice(0).map((v) => clone(v));\n  }\n\n  // best way to clone a js object maybe\n  // https://stackoverflow.com/questions/41474986/how-to-clone-a-javascript-es6-class-instance\n  const proto = Object.getPrototypeOf(value);\n  let c = Object.create(proto);\n  c = Object.setPrototypeOf(c, proto);\n  // need to make a deep copy so we dont use Object.assign\n  // also Object.assign wont copy property descriptor exactly\n  return Object.keys(value).reduce((newVal, prop) => {\n    const propDesc = Object.getOwnPropertyDescriptor(value, prop);\n    if (propDesc.get) {\n      Object.defineProperty(newVal, prop, propDesc);\n    } else {\n      newVal[prop] = clone(value[prop]);\n    }\n\n    return newVal;\n  }, c);\n}\n\nexport function defineHiddenProp(field: any, prop: string, defaultValue: any) {\n  Object.defineProperty(field, prop, { enumerable: false, writable: true, configurable: true });\n  field[prop] = defaultValue;\n}\n\ntype IObserveFn<T> = (change: { currentValue: T; previousValue?: T; firstChange: boolean }) => void;\nexport interface IObserver<T> {\n  setValue: (value: T) => void;\n  unsubscribe: Function;\n}\ninterface IObserveTarget<T> {\n  [prop: string]: any;\n  _observers?: {\n    [prop: string]: {\n      value: T;\n      onChange: IObserveFn<T>[];\n    };\n  };\n}\n\nexport function observeDeep({ source, paths, target, setFn }) {\n  const observers = [];\n  if (paths.length === 0) {\n    target = source;\n  }\n\n  Object.keys(target).forEach((path) => {\n    let unsubscribe = () => {};\n    const observer = observe(source, [...paths, path], ({ firstChange, currentValue }) => {\n      !firstChange && setFn();\n\n      unsubscribe();\n      const i = observers.indexOf(unsubscribe);\n      if (i > -1) {\n        observers.splice(i, 1);\n      }\n\n      if (isObject(currentValue) && currentValue.constructor.name === 'Object') {\n        unsubscribe = observeDeep({ source, setFn, paths: [...paths, path], target: currentValue });\n        observers.push(unsubscribe);\n      }\n    });\n\n    observers.push(() => observer.unsubscribe());\n  });\n\n  return () => {\n    observers.forEach((observer) => observer());\n  };\n}\n\nexport function observe<T = any>(o: IObserveTarget<T>, paths: string[], setFn: IObserveFn<T>): IObserver<T> {\n  if (!o._observers) {\n    defineHiddenProp(o, '_observers', {});\n  }\n\n  let target = o;\n  for (let i = 0; i < paths.length - 1; i++) {\n    if (!target[paths[i]] || !isObject(target[paths[i]])) {\n      target[paths[i]] = /^\\d+$/.test(paths[i + 1]) ? [] : {};\n    }\n    target = target[paths[i]];\n  }\n\n  const key = paths[paths.length - 1];\n  const prop = paths.join('.');\n  if (!o._observers[prop]) {\n    o._observers[prop] = { value: target[key], onChange: [] };\n  }\n\n  const state = o._observers[prop];\n  if (state.onChange.indexOf(setFn) === -1) {\n    state.onChange.push(setFn);\n    setFn({ currentValue: state.value, firstChange: true });\n    if (state.onChange.length === 1) {\n      const { enumerable } = Object.getOwnPropertyDescriptor(target, key) || { enumerable: true };\n      Object.defineProperty(target, key, {\n        enumerable,\n        configurable: true,\n        get: () => state.value,\n        set: (currentValue) => {\n          if (currentValue !== state.value) {\n            const previousValue = state.value;\n            state.value = currentValue;\n            state.onChange.forEach((changeFn) => changeFn({ previousValue, currentValue, firstChange: false }));\n          }\n        },\n      });\n    }\n  }\n\n  return {\n    setValue(value: T) {\n      state.value = value;\n    },\n    unsubscribe() {\n      state.onChange = state.onChange.filter((changeFn) => changeFn !== setFn);\n    },\n  };\n}\n\nexport function reduceFormUpdateValidityCalls(form: any, action: Function) {\n  const updateValidity = form._updateTreeValidity.bind(form);\n\n  let updateValidityArgs = null;\n  form._updateTreeValidity = (...args) => (updateValidityArgs = args);\n  action();\n\n  updateValidityArgs && updateValidity(updateValidityArgs);\n  form._updateTreeValidity = updateValidity;\n}\n","import { Injectable, InjectionToken, ComponentRef } from '@angular/core';\nimport { FieldType } from './../templates/field.type';\nimport { reverseDeepMerge, defineHiddenProp } from './../utils';\nimport {\n  FormlyFieldConfig,\n  FormlyFieldConfigCache,\n  ConfigOption,\n  TypeOption,\n  ValidatorOption,\n  WrapperOption,\n  FormlyExtension,\n  ValidationMessageOption,\n} from '../models';\n\nexport const FORMLY_CONFIG = new InjectionToken<ConfigOption[]>('FORMLY_CONFIG');\n\n/**\n * Maintains list of formly field directive types. This can be used to register new field templates.\n */\n@Injectable({ providedIn: 'root' })\nexport class FormlyConfig {\n  types: { [name: string]: TypeOption } = {};\n  validators: { [name: string]: ValidatorOption } = {};\n  wrappers: { [name: string]: WrapperOption } = {};\n  messages: { [name: string]: ValidationMessageOption['message'] } = {};\n  extras: ConfigOption['extras'] = {\n    checkExpressionOn: 'changeDetectionCheck',\n    showError(field: FieldType) {\n      return (\n        field.formControl &&\n        field.formControl.invalid &&\n        (field.formControl.touched ||\n          (field.options.parentForm && field.options.parentForm.submitted) ||\n          !!(field.field.validation && field.field.validation.show))\n      );\n    },\n  };\n  extensions: { [name: string]: FormlyExtension } = {};\n\n  addConfig(config: ConfigOption) {\n    if (config.types) {\n      config.types.forEach((type) => this.setType(type));\n    }\n    if (config.validators) {\n      config.validators.forEach((validator) => this.setValidator(validator));\n    }\n    if (config.wrappers) {\n      config.wrappers.forEach((wrapper) => this.setWrapper(wrapper));\n    }\n    if (config.validationMessages) {\n      config.validationMessages.forEach((validation) => this.addValidatorMessage(validation.name, validation.message));\n    }\n    if (config.extensions) {\n      config.extensions.forEach((c) => (this.extensions[c.name] = c.extension));\n    }\n    if (config.extras) {\n      this.extras = { ...this.extras, ...config.extras };\n    }\n  }\n\n  setType(options: TypeOption | TypeOption[]) {\n    if (Array.isArray(options)) {\n      options.forEach((option) => this.setType(option));\n    } else {\n      if (!this.types[options.name]) {\n        this.types[options.name] = <TypeOption>{ name: options.name };\n      }\n\n      ['component', 'extends', 'defaultOptions'].forEach((prop) => {\n        if (options.hasOwnProperty(prop)) {\n          this.types[options.name][prop] = options[prop];\n        }\n      });\n\n      if (options.wrappers) {\n        options.wrappers.forEach((wrapper) => this.setTypeWrapper(options.name, wrapper));\n      }\n    }\n  }\n\n  getType(name: string): TypeOption {\n    if (!this.types[name]) {\n      throw new Error(\n        `[Formly Error] The type \"${name}\" could not be found. Please make sure that is registered through the FormlyModule declaration.`,\n      );\n    }\n\n    this.mergeExtendedType(name);\n\n    return this.types[name];\n  }\n\n  getMergedField(field: FormlyFieldConfig = {}): any {\n    const type = this.getType(field.type);\n    if (type.defaultOptions) {\n      reverseDeepMerge(field, type.defaultOptions);\n    }\n\n    const extendDefaults = type.extends && this.getType(type.extends).defaultOptions;\n    if (extendDefaults) {\n      reverseDeepMerge(field, extendDefaults);\n    }\n\n    if (field && field.optionsTypes) {\n      field.optionsTypes.forEach((option) => {\n        const defaultOptions = this.getType(option).defaultOptions;\n        if (defaultOptions) {\n          reverseDeepMerge(field, defaultOptions);\n        }\n      });\n    }\n\n    const componentRef = this.resolveFieldTypeRef(field);\n    if (componentRef && componentRef.instance && componentRef.instance.defaultOptions) {\n      reverseDeepMerge(field, componentRef.instance.defaultOptions);\n    }\n\n    if (!field.wrappers && type.wrappers) {\n      field.wrappers = [...type.wrappers];\n    }\n  }\n\n  /** @internal */\n  resolveFieldTypeRef(field: FormlyFieldConfigCache = {}): ComponentRef<FieldType> {\n    if (!field.type) {\n      return null;\n    }\n\n    const type = this.getType(field.type);\n    if (!type.component || type['_componentRef']) {\n      return type['_componentRef'];\n    }\n\n    const { _resolver, _injector } = field.options;\n    if (!_resolver || !_injector) {\n      return null;\n    }\n\n    defineHiddenProp(\n      type,\n      '_componentRef',\n      _resolver.resolveComponentFactory<FieldType>(type.component).create(_injector),\n    );\n\n    return type['_componentRef'];\n  }\n\n  setWrapper(options: WrapperOption) {\n    this.wrappers[options.name] = options;\n    if (options.types) {\n      options.types.forEach((type) => {\n        this.setTypeWrapper(type, options.name);\n      });\n    }\n  }\n\n  getWrapper(name: string): WrapperOption {\n    if (!this.wrappers[name]) {\n      throw new Error(\n        `[Formly Error] The wrapper \"${name}\" could not be found. Please make sure that is registered through the FormlyModule declaration.`,\n      );\n    }\n\n    return this.wrappers[name];\n  }\n\n  setTypeWrapper(type: string, name: string) {\n    if (!this.types[type]) {\n      this.types[type] = <TypeOption>{};\n    }\n    if (!this.types[type].wrappers) {\n      this.types[type].wrappers = [];\n    }\n    if (this.types[type].wrappers.indexOf(name) === -1) {\n      this.types[type].wrappers.push(name);\n    }\n  }\n\n  setValidator(options: ValidatorOption) {\n    this.validators[options.name] = options;\n  }\n\n  getValidator(name: string): ValidatorOption {\n    if (!this.validators[name]) {\n      throw new Error(\n        `[Formly Error] The validator \"${name}\" could not be found. Please make sure that is registered through the FormlyModule declaration.`,\n      );\n    }\n\n    return this.validators[name];\n  }\n\n  addValidatorMessage(name: string, message: ValidationMessageOption['message']) {\n    this.messages[name] = message;\n  }\n\n  getValidatorMessage(name: string) {\n    return this.messages[name];\n  }\n\n  private mergeExtendedType(name: string) {\n    if (!this.types[name].extends) {\n      return;\n    }\n\n    const extendedType = this.getType(this.types[name].extends);\n    if (!this.types[name].component) {\n      this.types[name].component = extendedType.component;\n    }\n\n    if (!this.types[name].wrappers) {\n      this.types[name].wrappers = extendedType.wrappers;\n    }\n  }\n}\n","import { Injectable, ComponentFactoryResolver, Injector, Optional } from '@angular/core';\nimport { FormGroup, FormArray, FormGroupDirective } from '@angular/forms';\nimport { FormlyConfig } from './formly.config';\nimport { FormlyFieldConfig, FormlyFormOptions, FormlyFieldConfigCache } from '../models';\nimport { defineHiddenProp, reduceFormUpdateValidityCalls, observe } from '../utils';\n\n@Injectable({ providedIn: 'root' })\nexport class FormlyFormBuilder {\n  constructor(\n    private config: FormlyConfig,\n    private resolver: ComponentFactoryResolver,\n    private injector: Injector,\n    @Optional() private parentForm: FormGroupDirective,\n  ) {}\n\n  buildForm(form: FormGroup | FormArray, fieldGroup: FormlyFieldConfig[] = [], model: any, options: FormlyFormOptions) {\n    this.build({ fieldGroup, model, form, options });\n  }\n\n  build(field: FormlyFieldConfig) {\n    if (!this.config.extensions.core) {\n      throw new Error('NgxFormly: missing `forRoot()` call. use `forRoot()` when registering the `FormlyModule`.');\n    }\n\n    if (!field.parent) {\n      this._setOptions(field);\n      reduceFormUpdateValidityCalls(field.form, () => this._build(field));\n      const options = (field as FormlyFieldConfigCache).options;\n      options.checkExpressions && options.checkExpressions(field, true);\n      options.detectChanges && options.detectChanges(field);\n    } else {\n      this._build(field);\n    }\n  }\n\n  private _build(field: FormlyFieldConfigCache) {\n    if (!field) {\n      return;\n    }\n\n    this.getExtensions().forEach((extension) => extension.prePopulate && extension.prePopulate(field));\n    this.getExtensions().forEach((extension) => extension.onPopulate && extension.onPopulate(field));\n\n    if (field.fieldGroup) {\n      field.fieldGroup.forEach((f) => this._build(f));\n    }\n\n    this.getExtensions().forEach((extension) => extension.postPopulate && extension.postPopulate(field));\n  }\n\n  private getExtensions() {\n    return Object.keys(this.config.extensions).map((name) => this.config.extensions[name]);\n  }\n\n  private _setOptions(field: FormlyFieldConfigCache) {\n    field.form = field.form || new FormGroup({});\n    field.model = field.model || {};\n    field.options = field.options || {};\n    const options = field.options;\n\n    if (!options._resolver) {\n      defineHiddenProp(options, '_resolver', this.resolver);\n    }\n\n    if (!options._injector) {\n      defineHiddenProp(options, '_injector', this.injector);\n    }\n\n    if (!options.build) {\n      options._buildForm = () => {\n        console.warn(`Formly: 'options._buildForm' is deprecated since v6.0, use 'options.build' instead.`);\n        this.build(field);\n      };\n      options.build = (f: FormlyFieldConfig) => this.build(f);\n    }\n\n    if (!options.parentForm && this.parentForm) {\n      defineHiddenProp(options, 'parentForm', this.parentForm);\n      observe(options, ['parentForm', 'submitted'], ({ firstChange }) => {\n        if (!firstChange) {\n          options.checkExpressions(field);\n          options.detectChanges(field);\n        }\n      });\n    }\n  }\n}\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  DoCheck,\n  OnChanges,\n  Input,\n  SimpleChanges,\n  EventEmitter,\n  Output,\n  OnDestroy,\n  NgZone,\n} from '@angular/core';\nimport { FormGroup, FormArray } from '@angular/forms';\nimport { FormlyFieldConfig, FormlyFormOptions, FormlyFieldConfigCache } from '../models';\nimport { FormlyFormBuilder } from '../services/formly.builder';\nimport { FormlyConfig } from '../services/formly.config';\nimport { clone } from '../utils';\nimport { switchMap, filter, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'formly-form',\n  template: ` <formly-field *ngFor=\"let f of fields\" [field]=\"f\"></formly-field> `,\n  providers: [FormlyFormBuilder],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FormlyForm implements DoCheck, OnChanges, OnDestroy {\n  @Input()\n  set form(form: FormGroup | FormArray) {\n    this.field.form = form;\n  }\n  get form() {\n    return this.field.form as FormGroup | FormArray;\n  }\n\n  @Input()\n  set model(model: any) {\n    this.setField({ model });\n  }\n  get model() {\n    return this.field.model;\n  }\n\n  @Input()\n  set fields(fieldGroup: FormlyFieldConfig[]) {\n    this.setField({ fieldGroup });\n  }\n  get fields() {\n    return this.field.fieldGroup;\n  }\n\n  @Input()\n  set options(options: FormlyFormOptions) {\n    this.setField({ options });\n  }\n  get options() {\n    return this.field.options;\n  }\n\n  @Output() modelChange = new EventEmitter<any>();\n\n  private field: FormlyFieldConfigCache = {};\n  private _modelChangeValue: any = {};\n  private valueChangesUnsubscribe = () => {};\n\n  constructor(private builder: FormlyFormBuilder, private config: FormlyConfig, private ngZone: NgZone) {}\n\n  ngDoCheck() {\n    if (this.config.extras.checkExpressionOn === 'changeDetectionCheck') {\n      this.checkExpressionChange();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.fields || changes.form || (changes.model && this._modelChangeValue !== changes.model.currentValue)) {\n      this.valueChangesUnsubscribe();\n      this.builder.build(this.field);\n      this.valueChangesUnsubscribe = this.valueChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this.valueChangesUnsubscribe();\n  }\n\n  private checkExpressionChange() {\n    this.field.options.checkExpressions(this.field);\n  }\n\n  private valueChanges() {\n    this.valueChangesUnsubscribe();\n\n    const sub = this.field.options.fieldChanges\n      .pipe(\n        filter(({ type }) => type === 'valueChanges'),\n        switchMap(() => this.ngZone.onStable.asObservable().pipe(take(1))),\n      )\n      .subscribe(() =>\n        this.ngZone.runGuarded(() => {\n          // runGuarded is used to keep in sync the expression changes\n          // https://github.com/ngx-formly/ngx-formly/issues/2095\n          this.checkExpressionChange();\n          this.modelChange.emit((this._modelChangeValue = clone(this.model)));\n        }),\n      );\n\n    return () => sub.unsubscribe();\n  }\n\n  private setField(field: FormlyFieldConfigCache) {\n    this.field = {\n      ...this.field,\n      ...(this.config.extras.immutable ? clone(field) : field),\n    };\n  }\n}\n","import {\n  Component,\n  Input,\n  ViewContainerRef,\n  ViewChild,\n  ComponentRef,\n  SimpleChanges,\n  ComponentFactoryResolver,\n  OnInit,\n  OnChanges,\n  OnDestroy,\n  AfterContentInit,\n  AfterViewInit,\n  Renderer2,\n  ElementRef,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { FormlyConfig } from '../services/formly.config';\nimport { FormlyFieldConfig, FormlyFieldConfigCache } from '../models';\nimport { defineHiddenProp, observe, observeDeep, getFieldValue, assignFieldValue } from '../utils';\nimport { FieldWrapper } from '../templates/field.wrapper';\nimport { FieldType } from '../templates/field.type';\nimport { isObservable } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, startWith } from 'rxjs/operators';\n\n@Component({\n  selector: 'formly-field',\n  template: '<ng-template #container></ng-template>',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FormlyField implements OnInit, OnChanges, AfterContentInit, AfterViewInit, OnDestroy {\n  @Input() field: FormlyFieldConfig;\n\n  @ViewChild('container', { read: ViewContainerRef, static: true }) containerRef: ViewContainerRef;\n\n  private hostObservers: ReturnType<typeof observe>[] = [];\n  private componentRefs: any[] = [];\n  private hooksObservers: Function[] = [];\n\n  valueChangesUnsubscribe = () => {};\n\n  constructor(\n    private config: FormlyConfig,\n    private renderer: Renderer2,\n    private resolver: ComponentFactoryResolver,\n    private elementRef: ElementRef,\n  ) {}\n\n  ngAfterContentInit() {\n    this.triggerHook('afterContentInit');\n  }\n\n  ngAfterViewInit() {\n    this.triggerHook('afterViewInit');\n  }\n\n  ngOnInit() {\n    this.triggerHook('onInit');\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this.triggerHook('onChanges', changes);\n  }\n\n  ngOnDestroy() {\n    this.resetRefs(this.field);\n    this.hostObservers.forEach((hostObserver) => hostObserver.unsubscribe());\n    this.hooksObservers.forEach((unsubscribe) => unsubscribe());\n    this.valueChangesUnsubscribe();\n    this.triggerHook('onDestroy');\n  }\n\n  private renderField(containerRef: ViewContainerRef, f: FormlyFieldConfigCache, wrappers: string[]) {\n    if (this.containerRef === containerRef) {\n      this.resetRefs(this.field);\n      this.containerRef.clear();\n    }\n\n    if (wrappers && wrappers.length > 0) {\n      const [wrapper, ...wps] = wrappers;\n      const { component } = this.config.getWrapper(wrapper);\n\n      const ref = containerRef.createComponent<FieldWrapper>(this.resolver.resolveComponentFactory(component));\n      this.attachComponentRef(ref, f);\n      observe<ViewContainerRef>(ref.instance, ['fieldComponent'], ({ currentValue, previousValue, firstChange }) => {\n        if (currentValue) {\n          const viewRef = previousValue ? previousValue.detach() : null;\n          if (viewRef && !viewRef.destroyed) {\n            currentValue.insert(viewRef);\n          } else {\n            this.renderField(currentValue, f, wps);\n          }\n\n          !firstChange && ref.changeDetectorRef.detectChanges();\n        }\n      });\n    } else if (f && f.type) {\n      const { component } = this.config.getType(f.type);\n      const ref = containerRef.createComponent<FieldWrapper>(this.resolver.resolveComponentFactory(component));\n      this.attachComponentRef(ref, f);\n    }\n  }\n\n  private triggerHook(name: string, changes?: SimpleChanges) {\n    if (name === 'onInit' || (name === 'onChanges' && changes.field && !changes.field.firstChange)) {\n      this.valueChangesUnsubscribe = this.fieldChanges(this.field);\n    }\n\n    if (this.field && this.field.hooks && this.field.hooks[name]) {\n      if (!changes || changes.field) {\n        const r = this.field.hooks[name](this.field);\n        if (isObservable(r) && ['onInit', 'afterContentInit', 'afterViewInit'].indexOf(name) !== -1) {\n          const sub = r.subscribe();\n          this.hooksObservers.push(() => sub.unsubscribe());\n        }\n      }\n    }\n\n    if (name === 'onChanges' && changes.field) {\n      this.renderHostBinding();\n      this.resetRefs(changes.field.previousValue);\n      this.renderField(this.containerRef, this.field, this.field ? this.field.wrappers : []);\n    }\n  }\n\n  private attachComponentRef<T extends FieldType>(ref: ComponentRef<T>, field: FormlyFieldConfigCache) {\n    this.componentRefs.push(ref);\n    field._componentRefs.push(ref);\n    Object.assign(ref.instance, { field });\n  }\n\n  private renderHostBinding() {\n    if (!this.field) {\n      return;\n    }\n\n    this.hostObservers.forEach((hostObserver) => hostObserver.unsubscribe());\n    this.hostObservers = [\n      observe<boolean>(this.field, ['hide'], ({ firstChange, currentValue }) => {\n        if (!firstChange || (firstChange && currentValue)) {\n          this.renderer.setStyle(this.elementRef.nativeElement, 'display', currentValue ? 'none' : '');\n        }\n      }),\n      observe<string>(this.field, ['className'], ({ firstChange, currentValue }) => {\n        if (!firstChange || (firstChange && currentValue)) {\n          this.renderer.setAttribute(this.elementRef.nativeElement, 'class', currentValue);\n        }\n      }),\n    ];\n  }\n\n  private resetRefs(field: FormlyFieldConfigCache) {\n    if (field) {\n      if (field._componentRefs) {\n        field._componentRefs = field._componentRefs.filter((ref) => this.componentRefs.indexOf(ref) === -1);\n      } else {\n        defineHiddenProp(this.field, '_componentRefs', []);\n      }\n    }\n\n    this.componentRefs = [];\n  }\n\n  private fieldChanges(field: FormlyFieldConfigCache) {\n    this.valueChangesUnsubscribe();\n    if (!field) {\n      return () => {};\n    }\n\n    const subscribes = [\n      observeDeep({\n        source: field,\n        target: field.templateOptions,\n        paths: ['templateOptions'],\n        setFn: () => field.options.detectChanges(field),\n      }),\n      observeDeep({\n        source: field,\n        target: field.options.formState,\n        paths: ['options', 'formState'],\n        setFn: () => field.options.detectChanges(field),\n      }),\n    ];\n\n    for (const path of [['template'], ['fieldGroupClassName'], ['validation', 'show']]) {\n      const fieldObserver = observe(\n        field,\n        path,\n        ({ firstChange }) => !firstChange && field.options.detectChanges(field),\n      );\n      subscribes.push(() => fieldObserver.unsubscribe());\n    }\n\n    if (field.key && !field.fieldGroup) {\n      const control = field.formControl;\n      let valueChanges = control.valueChanges.pipe(distinctUntilChanged());\n\n      if (control.value !== getFieldValue(field)) {\n        valueChanges = valueChanges.pipe(startWith(control.value));\n      }\n\n      const { updateOn, debounce } = field.modelOptions;\n      if ((!updateOn || updateOn === 'change') && debounce && debounce.default > 0) {\n        valueChanges = control.valueChanges.pipe(debounceTime(debounce.default));\n      }\n\n      const sub = valueChanges.subscribe((value) => {\n        // workaround for https://github.com/angular/angular/issues/13792\n        if (control instanceof FormControl && control['_fields'] && control['_fields'].length > 1) {\n          control.patchValue(value, { emitEvent: false, onlySelf: true });\n        }\n\n        if (field.parsers && field.parsers.length > 0) {\n          field.parsers.forEach((parserFn) => (value = parserFn(value)));\n        }\n\n        assignFieldValue(field, value, true);\n        field.options.fieldChanges.next({ value, field, type: 'valueChanges' });\n      });\n\n      subscribes.push(() => sub.unsubscribe());\n    }\n\n    return () => subscribes.forEach((subscribe) => subscribe());\n  }\n}\n","import {\n  Directive,\n  ElementRef,\n  Input,\n  OnChanges,\n  SimpleChanges,\n  Renderer2,\n  DoCheck,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport { FormlyFieldConfig, FormlyTemplateOptions } from '../models';\nimport { defineHiddenProp, FORMLY_VALIDATORS, observe, IObserver } from '../utils';\nimport { DOCUMENT } from '@angular/common';\n\n@Directive({\n  selector: '[formlyAttributes]',\n  host: {\n    '(focus)': 'onFocus($event)',\n    '(blur)': 'onBlur($event)',\n  },\n})\nexport class FormlyAttributes implements OnChanges, DoCheck, OnDestroy {\n  @Input('formlyAttributes') field: FormlyFieldConfig;\n  @Input() id: string;\n\n  private document: Document;\n  private uiAttributesCache: any = {};\n  private uiAttributes = [...FORMLY_VALIDATORS, 'tabindex', 'placeholder', 'readonly', 'disabled', 'step'];\n  private focusObserver: IObserver<boolean>;\n\n  /**\n   * HostBinding doesn't register listeners conditionally which may produce some perf issues.\n   *\n   * Formly issue: https://github.com/ngx-formly/ngx-formly/issues/1991\n   */\n  private uiEvents = {\n    listeners: [],\n    events: ['click', 'keyup', 'keydown', 'keypress', 'change'],\n  };\n\n  get to(): FormlyTemplateOptions {\n    return this.field.templateOptions || {};\n  }\n\n  private get fieldAttrElements(): ElementRef[] {\n    return (this.field && this.field['_elementRefs']) || [];\n  }\n\n  constructor(private renderer: Renderer2, private elementRef: ElementRef, @Inject(DOCUMENT) _document: any) {\n    this.document = _document;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.field) {\n      this.field.name && this.setAttribute('name', this.field.name);\n\n      this.uiEvents.listeners.forEach((listener) => listener());\n      this.uiEvents.events.forEach((eventName) => {\n        let callback = this.to && this.to[eventName];\n        if (eventName === 'change') {\n          callback = this.onChange.bind(this);\n        }\n\n        if (callback) {\n          this.uiEvents.listeners.push(\n            this.renderer.listen(this.elementRef.nativeElement, eventName, (e) => callback(this.field, e)),\n          );\n        }\n      });\n\n      if (this.to && this.to.attributes) {\n        observe(this.field, ['templateOptions', 'attributes'], ({ currentValue, previousValue }) => {\n          if (previousValue) {\n            Object.keys(previousValue).forEach((attr) => this.removeAttribute(attr));\n          }\n\n          if (currentValue) {\n            Object.keys(currentValue).forEach((attr) => this.setAttribute(attr, currentValue[attr]));\n          }\n        });\n      }\n\n      this.detachElementRef(changes.field.previousValue);\n      this.attachElementRef(changes.field.currentValue);\n      if (this.fieldAttrElements.length === 1) {\n        !this.id && this.field.id && this.setAttribute('id', this.field.id);\n        this.focusObserver = observe<boolean>(this.field, ['focus'], ({ currentValue }) => {\n          this.toggleFocus(currentValue);\n        });\n      }\n    }\n\n    if (changes.id) {\n      this.setAttribute('id', this.id);\n    }\n  }\n\n  /**\n   * We need to re-evaluate all the attributes on every change detection cycle, because\n   * by using a HostBinding we run into certain edge cases. This means that whatever logic\n   * is in here has to be super lean or we risk seriously damaging or destroying the performance.\n   *\n   * Formly issue: https://github.com/ngx-formly/ngx-formly/issues/1317\n   * Material issue: https://github.com/angular/components/issues/14024\n   */\n  ngDoCheck() {\n    this.uiAttributes.forEach((attr) => {\n      const value = this.to[attr];\n      if (this.uiAttributesCache[attr] !== value) {\n        this.uiAttributesCache[attr] = value;\n        if (value || value === 0) {\n          this.setAttribute(attr, value === true ? attr : `${value}`);\n        } else {\n          this.removeAttribute(attr);\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this.uiEvents.listeners.forEach((listener) => listener());\n    this.detachElementRef(this.field);\n    this.focusObserver && this.focusObserver.unsubscribe();\n  }\n\n  toggleFocus(value: boolean) {\n    const element = this.fieldAttrElements ? this.fieldAttrElements[0] : null;\n    if (!element || !element.nativeElement.focus) {\n      return;\n    }\n\n    const isFocused =\n      !!this.document.activeElement &&\n      this.fieldAttrElements.some(\n        ({ nativeElement }) =>\n          this.document.activeElement === nativeElement || nativeElement.contains(this.document.activeElement),\n      );\n\n    if (value && !isFocused) {\n      element.nativeElement.focus();\n    } else if (!value && isFocused) {\n      element.nativeElement.blur();\n    }\n  }\n\n  onFocus($event: any) {\n    this.focusObserver && this.focusObserver.setValue(true);\n    if (this.to.focus) {\n      this.to.focus(this.field, $event);\n    }\n  }\n\n  onBlur($event: any) {\n    this.focusObserver && this.focusObserver.setValue(false);\n    if (this.to.blur) {\n      this.to.blur(this.field, $event);\n    }\n  }\n\n  onChange($event: any) {\n    if (this.to.change) {\n      this.to.change(this.field, $event);\n    }\n\n    if (this.field.formControl) {\n      this.field.formControl.markAsDirty();\n    }\n  }\n\n  private attachElementRef(f: FormlyFieldConfig) {\n    if (!f) {\n      return;\n    }\n\n    if (f['_elementRefs'] && f['_elementRefs'].indexOf(this.elementRef) === -1) {\n      f['_elementRefs'].push(this.elementRef);\n    } else {\n      defineHiddenProp(f, '_elementRefs', [this.elementRef]);\n    }\n  }\n\n  private detachElementRef(f: FormlyFieldConfig) {\n    const index = f && f['_elementRefs'] ? this.fieldAttrElements.indexOf(this.elementRef) : -1;\n    if (index !== -1) {\n      this.field['_elementRefs'].splice(index, 1);\n    }\n  }\n\n  private setAttribute(attr: string, value: string) {\n    this.renderer.setAttribute(this.elementRef.nativeElement, attr, value);\n  }\n\n  private removeAttribute(attr: string) {\n    this.renderer.removeAttribute(this.elementRef.nativeElement, attr);\n  }\n}\n","import { Input, Directive } from '@angular/core';\nimport { FormlyFieldConfig } from '../models';\n\n@Directive()\nexport abstract class FieldType<F extends FormlyFieldConfig = FormlyFieldConfig> {\n  @Input() field: F;\n  defaultOptions?: F;\n\n  get model() {\n    return this.field.model;\n  }\n\n  get form() {\n    return this.field.form;\n  }\n\n  get options() {\n    return this.field.options;\n  }\n\n  get key() {\n    return this.field.key;\n  }\n\n  get formControl() {\n    return this.field.formControl;\n  }\n\n  get to() {\n    return this.field.templateOptions || {};\n  }\n\n  get showError(): boolean {\n    return this.options.showError(this);\n  }\n\n  get id(): string {\n    return this.field.id;\n  }\n\n  get formState() {\n    return this.options.formState || {};\n  }\n}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { FieldType } from './field.type';\n\n@Component({\n  selector: 'formly-group',\n  template: `\n    <formly-field *ngFor=\"let f of field.fieldGroup\" [field]=\"f\"></formly-field>\n    <ng-content></ng-content>\n  `,\n  host: {\n    '[class]': 'field.fieldGroupClassName || \"\"',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FormlyGroup extends FieldType {}\n","import { Component, Input, ChangeDetectionStrategy, OnChanges } from '@angular/core';\nimport { FormlyConfig } from '../services/formly.config';\nimport { FormlyFieldConfig } from '../models';\nimport { isObject } from '../utils';\nimport { Observable, isObservable, of } from 'rxjs';\nimport { startWith, switchMap } from 'rxjs/operators';\n\n@Component({\n  selector: 'formly-validation-message',\n  template: '{{ errorMessage$ | async }}',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FormlyValidationMessage implements OnChanges {\n  @Input() field: FormlyFieldConfig;\n  errorMessage$: Observable<string>;\n\n  constructor(private config: FormlyConfig) {}\n\n  ngOnChanges() {\n    this.errorMessage$ = this.field.formControl.statusChanges.pipe(\n      startWith(null),\n      switchMap(() => (isObservable(this.errorMessage) ? this.errorMessage : of(this.errorMessage))),\n    );\n  }\n\n  get errorMessage() {\n    const fieldForm = this.field.formControl;\n    for (const error in fieldForm.errors) {\n      if (fieldForm.errors.hasOwnProperty(error)) {\n        let message = this.config.getValidatorMessage(error);\n\n        if (isObject(fieldForm.errors[error])) {\n          if (fieldForm.errors[error].errorPath) {\n            return;\n          }\n\n          if (fieldForm.errors[error].message) {\n            message = fieldForm.errors[error].message;\n          }\n        }\n\n        if (this.field.validation && this.field.validation.messages && this.field.validation.messages[error]) {\n          message = this.field.validation.messages[error];\n        }\n\n        if (this.field.validators && this.field.validators[error] && this.field.validators[error].message) {\n          message = this.field.validators[error].message;\n        }\n\n        if (\n          this.field.asyncValidators &&\n          this.field.asyncValidators[error] &&\n          this.field.asyncValidators[error].message\n        ) {\n          message = this.field.asyncValidators[error].message;\n        }\n\n        if (typeof message === 'function') {\n          return message(fieldForm.errors[error], this.field);\n        }\n\n        return message;\n      }\n    }\n  }\n}\n","import { EventEmitter } from '@angular/core';\nimport { FormArray, FormGroup, FormControl, AbstractControl } from '@angular/forms';\nimport {\n  getKeyPath,\n  getFieldValue,\n  isNil,\n  defineHiddenProp,\n  observe,\n  assignFieldValue,\n  isUndefined,\n} from '../../utils';\nimport { FormlyFieldConfig, FormlyFieldConfigCache } from '../../models';\n\nexport function unregisterControl(field: FormlyFieldConfig, emitEvent = false) {\n  const form = field.formControl.parent as FormArray | FormGroup;\n  if (!form) {\n    return;\n  }\n\n  const control = field.formControl;\n  const opts = { emitEvent };\n  if (form instanceof FormArray) {\n    const key = form.controls.findIndex((c) => c === control);\n    if (key !== -1) {\n      updateControl(form, opts, () => form.removeAt(key));\n    }\n  } else if (form instanceof FormGroup) {\n    const paths = getKeyPath(field);\n    const key = paths[paths.length - 1];\n    if (form.get([key]) === control) {\n      updateControl(form, opts, () => form.removeControl(key));\n    }\n  }\n\n  control.setParent(null);\n  if (field['autoClear']) {\n    if (field.parent.model) {\n      delete field.parent.model[field.key];\n    }\n    control.reset(\n      { value: undefined, disabled: control.disabled },\n      { emitEvent: field.fieldGroup ? false : emitEvent, onlySelf: true },\n    );\n  }\n}\n\nexport function findControl(field: FormlyFieldConfig): AbstractControl {\n  if (field.formControl) {\n    return field.formControl;\n  }\n\n  const form = field.parent.formControl as FormGroup;\n\n  return form ? form.get(getKeyPath(field)) : null;\n}\n\nexport function registerControl(field: FormlyFieldConfigCache, control?: any, emitEvent = false) {\n  control = control || field.formControl;\n\n  if (!control['_fields']) {\n    defineHiddenProp(control, '_fields', []);\n  }\n  if (control['_fields'].indexOf(field) === -1) {\n    control['_fields'].push(field);\n  }\n\n  if (!field.formControl && control) {\n    defineHiddenProp(field, 'formControl', control);\n    field.templateOptions.disabled = !!field.templateOptions.disabled;\n    const disabledObserver = observe(field, ['templateOptions', 'disabled'], ({ firstChange, currentValue }) => {\n      if (!firstChange) {\n        currentValue ? field.formControl.disable() : field.formControl.enable();\n      }\n    });\n    if (control.registerOnDisabledChange) {\n      control.registerOnDisabledChange(disabledObserver.setValue);\n    }\n  }\n\n  if (!field.form) {\n    return;\n  }\n\n  let form = field.form;\n  const paths = getKeyPath(field);\n  if (!form['_formlyControls']) {\n    defineHiddenProp(form, '_formlyControls', {});\n  }\n  form['_formlyControls'][paths.join('.')] = control;\n\n  for (let i = 0; i < paths.length - 1; i++) {\n    const path = paths[i];\n    if (!form.get([path])) {\n      registerControl({\n        key: path,\n        formControl: new FormGroup({}),\n        form,\n        parent: {},\n      });\n    }\n\n    form = <FormGroup>form.get([path]);\n  }\n\n  if (field['autoClear'] && !isUndefined(field.defaultValue) && isUndefined(getFieldValue(field))) {\n    assignFieldValue(field, field.defaultValue);\n  }\n\n  const value = getFieldValue(field);\n  if (!(isNil(control.value) && isNil(value)) && control.value !== value && control instanceof FormControl) {\n    control.patchValue(value, { emitEvent: false });\n  }\n  const key = paths[paths.length - 1];\n  if (!field._hide && form.get([key]) !== control) {\n    updateControl(form, { emitEvent }, () => (form as FormGroup).setControl(key, control));\n  }\n}\n\nexport function updateValidity(c: AbstractControl) {\n  const status = c.status;\n  c.updateValueAndValidity({ emitEvent: false });\n  if (status !== c.status) {\n    (c.statusChanges as EventEmitter<string>).emit(c.status);\n  }\n}\n\nfunction updateControl(form: FormGroup | FormArray, opts: { emitEvent: boolean }, action: Function) {\n  /**\n   *  workaround for https://github.com/angular/angular/issues/27679\n   */\n  if (form instanceof FormGroup && !form['__patchForEachChild']) {\n    defineHiddenProp(form, '__patchForEachChild', true);\n    (form as any)._forEachChild = (cb: Function) => {\n      Object.keys(form.controls).forEach((k) => form.controls[k] && cb(form.controls[k], k));\n    };\n  }\n\n  /**\n   * workaround for https://github.com/angular/angular/issues/20439\n   */\n  const updateValueAndValidity = form.updateValueAndValidity.bind(form);\n  if (opts.emitEvent === false) {\n    form.updateValueAndValidity = (opts) => {\n      updateValueAndValidity({ ...(opts || {}), emitEvent: false });\n    };\n  }\n\n  action();\n\n  if (opts.emitEvent === false) {\n    form.updateValueAndValidity = updateValueAndValidity;\n  }\n}\n","import { FormArray } from '@angular/forms';\nimport { FieldType } from './field.type';\nimport { clone, assignFieldValue, getFieldValue } from '../utils';\nimport { FormlyFieldConfig, FormlyExtension } from '../models';\nimport { registerControl, unregisterControl } from '../extensions/field-form/utils';\nimport { Directive } from '@angular/core';\n\n@Directive()\nexport abstract class FieldArrayType<F extends FormlyFieldConfig = FormlyFieldConfig> extends FieldType<F>\n  implements FormlyExtension {\n  formControl: FormArray;\n\n  onPopulate(field: FormlyFieldConfig) {\n    if (!field.formControl && field.key) {\n      registerControl(field, new FormArray([], { updateOn: field.modelOptions.updateOn }));\n    }\n\n    field.fieldGroup = field.fieldGroup || [];\n\n    const length = field.model ? field.model.length : 0;\n    if (field.fieldGroup.length > length) {\n      for (let i = field.fieldGroup.length - 1; i >= length; --i) {\n        unregisterControl(field.fieldGroup[i]);\n        field.fieldGroup.splice(i, 1);\n      }\n    }\n\n    for (let i = field.fieldGroup.length; i < length; i++) {\n      const f = { ...clone(field.fieldArray), key: `${i}` };\n      field.fieldGroup.push(f);\n    }\n  }\n\n  add(i?: number, initialModel?: any, { markAsDirty } = { markAsDirty: true }) {\n    i = i == null ? this.field.fieldGroup.length : i;\n    if (!this.model) {\n      assignFieldValue(this.field, []);\n    }\n\n    this.model.splice(i, 0, initialModel ? clone(initialModel) : undefined);\n    this._build();\n    markAsDirty && this.formControl.markAsDirty();\n  }\n\n  remove(i: number, { markAsDirty } = { markAsDirty: true }) {\n    this.model.splice(i, 1);\n    unregisterControl(this.field.fieldGroup[i], true);\n    this.field.fieldGroup.splice(i, 1);\n    this.field.fieldGroup.forEach((f, key) => (f.key = `${key}`));\n    this._build();\n    markAsDirty && this.formControl.markAsDirty();\n  }\n\n  private _build() {\n    this.options.build(this.field);\n    this.options.fieldChanges.next({\n      field: this.field,\n      value: getFieldValue(this.field),\n      type: 'valueChanges',\n    });\n  }\n}\n","import { ViewContainerRef, ViewChild, Directive } from '@angular/core';\nimport { FieldType } from './field.type';\nimport { FormlyFieldConfig } from '../models';\n\n@Directive()\nexport abstract class FieldWrapper<F extends FormlyFieldConfig = FormlyFieldConfig> extends FieldType<F> {\n  @ViewChild('fieldComponent', { read: ViewContainerRef }) fieldComponent: ViewContainerRef;\n}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { FieldType } from './field.type';\n\n@Component({\n  selector: 'formly-template',\n  template: `<div [innerHtml]=\"template\"></div>`,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FormlyTemplateType extends FieldType {\n  get template() {\n    if (this.field && this.field.template !== this.innerHtml.template) {\n      this.innerHtml = {\n        template: this.field.template,\n        content: this.to.safeHtml ? this.sanitizer.bypassSecurityTrustHtml(this.field.template) : this.field.template,\n      };\n    }\n\n    return this.innerHtml.content;\n  }\n\n  private innerHtml = { content: null, template: null };\n  constructor(private sanitizer: DomSanitizer) {\n    super();\n  }\n}\n","export function evalStringExpression(expression: string, argNames: string[]) {\n  try {\n    return Function(...argNames, `return ${expression};`) as any;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport function evalExpression(expression: string | Function | boolean, thisArg: any, argVal: any[]): any {\n  if (typeof expression === 'function') {\n    return expression.apply(thisArg, argVal);\n  } else {\n    return expression ? true : false;\n  }\n}\n","import { FormlyFieldConfig, FormlyValueChangeEvent, FormlyFieldConfigCache } from '../../models';\nimport { isObject, isNil, isFunction, defineHiddenProp, observe, reduceFormUpdateValidityCalls } from '../../utils';\nimport { evalExpression, evalStringExpression } from './utils';\nimport { Observable, Subscription } from 'rxjs';\nimport { FormlyExtension } from '../../models';\nimport { unregisterControl, registerControl, updateValidity } from '../field-form/utils';\n\n/** @experimental */\nexport class FieldExpressionExtension implements FormlyExtension {\n  onPopulate(field: FormlyFieldConfigCache) {\n    if (field._expressions) {\n      return;\n    }\n\n    // cache built expression\n    defineHiddenProp(field, '_expressions', {});\n    field.expressionProperties = field.expressionProperties || {};\n\n    observe(field, ['hide'], ({ currentValue, firstChange }) => {\n      defineHiddenProp(field, '_hide', !!currentValue);\n      if (!firstChange || (firstChange && currentValue === true)) {\n        field.templateOptions.hidden = currentValue;\n        field.options._hiddenFieldsForCheck.push(field);\n      }\n    });\n\n    if (field.hideExpression) {\n      observe(field, ['hideExpression'], ({ currentValue: expr }) => {\n        field._expressions.hide = this.parseExpressions(field, 'hide', typeof expr === 'boolean' ? () => expr : expr);\n      });\n    }\n\n    for (const key of Object.keys(field.expressionProperties)) {\n      observe(field, ['expressionProperties', key], ({ currentValue: expr }) => {\n        if (typeof expr === 'string' || isFunction(expr)) {\n          field._expressions[key] = this.parseExpressions(field, key, expr);\n        } else if (expr instanceof Observable) {\n          const subscribe = () =>\n            (expr as Observable<any>).subscribe((v) => {\n              this.evalExpr(field, key, v);\n            });\n\n          let subscription: Subscription = subscribe();\n          const onInit = field.hooks.onInit;\n          field.hooks.onInit = () => {\n            if (subscription === null) {\n              subscription = subscribe();\n            }\n            return onInit && onInit(field);\n          };\n\n          const onDestroy = field.hooks.onDestroy;\n          field.hooks.onDestroy = () => {\n            onDestroy && onDestroy(field);\n            subscription.unsubscribe();\n            subscription = null;\n          };\n        }\n      });\n    }\n  }\n\n  postPopulate(field: FormlyFieldConfigCache) {\n    if (field.parent) {\n      return;\n    }\n\n    if (!field.options.checkExpressions) {\n      field.options.checkExpressions = (f, ignoreCache = false) => {\n        reduceFormUpdateValidityCalls(f.form, () => this.checkExpressions(f, ignoreCache));\n\n        const options = field.options;\n        options._hiddenFieldsForCheck.sort((f) => (f.hide ? -1 : 1)).forEach((f) => this.changeHideState(f, f.hide));\n        options._hiddenFieldsForCheck = [];\n      };\n      field.options._checkField = (f, ignoreCache) => {\n        console.warn(`Formly: 'options._checkField' is deprecated since v6.0, use 'options.checkExpressions' instead.`);\n        field.options.checkExpressions(f, ignoreCache);\n      };\n    }\n  }\n\n  private parseExpressions(field: FormlyFieldConfigCache, path: string, expr: any) {\n    let parentExpression: any;\n    if (field.parent && ['hide', 'templateOptions.disabled'].includes(path)) {\n      parentExpression = evalStringExpression(`!!field.parent.${path}`, ['field']);\n    }\n\n    expr = expr || (() => false);\n    if (typeof expr === 'string') {\n      expr = evalStringExpression(expr, ['model', 'formState', 'field']);\n    }\n\n    let currentValue: any;\n\n    return (ignoreCache?: boolean) => {\n      const exprValue = evalExpression(\n        parentExpression ? (...args) => parentExpression(field) || expr(...args) : expr,\n        { field },\n        [field.model, field.options.formState, field],\n      );\n\n      if (\n        ignoreCache ||\n        (currentValue !== exprValue &&\n          (!isObject(exprValue) || JSON.stringify(exprValue) !== JSON.stringify(currentValue)))\n      ) {\n        currentValue = exprValue;\n        this.evalExpr(field, path, exprValue);\n\n        return true;\n      }\n\n      return false;\n    };\n  }\n\n  private checkExpressions(field: FormlyFieldConfigCache, ignoreCache = false) {\n    if (!field) {\n      return;\n    }\n\n    if (field._expressions) {\n      for (const key of Object.keys(field._expressions)) {\n        field._expressions[key](ignoreCache);\n      }\n    }\n\n    if (field.fieldGroup) {\n      field.fieldGroup.forEach((f) => this.checkExpressions(f, ignoreCache));\n    }\n  }\n\n  private changeDisabledState(field: FormlyFieldConfig, value: boolean) {\n    if (field.fieldGroup) {\n      field.fieldGroup\n        .filter((f) => !f.expressionProperties || !f.expressionProperties.hasOwnProperty('templateOptions.disabled'))\n        .forEach((f) => this.changeDisabledState(f, value));\n    }\n\n    if (field.key && field.templateOptions.disabled !== value) {\n      field.templateOptions.disabled = value;\n    }\n  }\n\n  private changeHideState(field: FormlyFieldConfig, hide: boolean) {\n    if (field.formControl && field.key) {\n      defineHiddenProp(field, '_hide', !!(hide || field.hide));\n      const c = field.formControl;\n      if (c['_fields'].length > 1) {\n        updateValidity(c);\n      }\n\n      hide === true && c['_fields'].every((f) => !!f._hide) ? unregisterControl(field) : registerControl(field);\n    }\n\n    if (field.fieldGroup) {\n      field.fieldGroup.filter((f) => !f.hideExpression).forEach((f) => this.changeHideState(f, hide));\n    }\n\n    if (field.options.fieldChanges) {\n      field.options.fieldChanges.next(<FormlyValueChangeEvent>{ field, type: 'hidden', value: hide });\n    }\n  }\n\n  private evalExpr(field: FormlyFieldConfigCache, prop: string, value: any) {\n    try {\n      let target = field;\n      const paths = prop.split('.');\n      const lastIndex = paths.length - 1;\n      for (let i = 0; i < lastIndex; i++) {\n        target = target[paths[i]];\n      }\n\n      target[paths[lastIndex]] = value;\n    } catch (error) {\n      error.message = `[Formly Error] [Expression \"${prop}\"] ${error.message}`;\n      throw error;\n    }\n\n    if (prop === 'templateOptions.disabled' && field.key) {\n      this.changeDisabledState(field, value);\n    }\n\n    if (prop.indexOf('model.') === 0) {\n      const key = prop.replace(/^model\\./, ''),\n        control = field.key && field.key === key ? field.formControl : field.form.get(key);\n\n      if (control && !(isNil(control.value) && isNil(value)) && control.value !== value) {\n        control.patchValue(value, { emitEvent: false });\n      }\n    }\n  }\n}\n","import { FormlyConfig } from '../../services/formly.config';\nimport { FormlyExtension, ValidatorOption, FormlyFieldConfigCache } from '../../models';\nimport { AbstractControl, Validators, ValidatorFn } from '@angular/forms';\nimport { FORMLY_VALIDATORS, defineHiddenProp, isPromise, observe, clone } from '../../utils';\nimport { updateValidity } from '../field-form/utils';\nimport { isObservable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n/** @experimental */\nexport class FieldValidationExtension implements FormlyExtension {\n  constructor(private config: FormlyConfig) {}\n\n  onPopulate(field: FormlyFieldConfigCache) {\n    this.initFieldValidation(field, 'validators');\n    this.initFieldValidation(field, 'asyncValidators');\n  }\n\n  private initFieldValidation(field: FormlyFieldConfigCache, type: 'validators' | 'asyncValidators') {\n    const validators: ValidatorFn[] = [];\n    if (type === 'validators' && !(field.hasOwnProperty('fieldGroup') && !field.key)) {\n      validators.push(this.getPredefinedFieldValidation(field));\n    }\n\n    if (field[type]) {\n      for (const validatorName of Object.keys(field[type])) {\n        validatorName === 'validation'\n          ? validators.push(...field[type].validation.map((v) => this.wrapNgValidatorFn(field, v)))\n          : validators.push(this.wrapNgValidatorFn(field, field[type][validatorName], validatorName));\n      }\n    }\n\n    defineHiddenProp(field, '_' + type, validators);\n  }\n\n  private getPredefinedFieldValidation(field: FormlyFieldConfigCache): ValidatorFn {\n    let VALIDATORS = [];\n    FORMLY_VALIDATORS.forEach((opt) =>\n      observe(field, ['templateOptions', opt], ({ currentValue, firstChange }) => {\n        VALIDATORS = VALIDATORS.filter((o) => o !== opt);\n        if (currentValue != null && currentValue !== false) {\n          VALIDATORS.push(opt);\n        }\n        if (!firstChange && field.formControl) {\n          updateValidity(field.formControl);\n        }\n      }),\n    );\n\n    return (control: AbstractControl) => {\n      if (VALIDATORS.length === 0) {\n        return null;\n      }\n\n      return Validators.compose(\n        VALIDATORS.map((opt) => () => {\n          const value = field.templateOptions[opt];\n          switch (opt) {\n            case 'required':\n              return Validators.required(control);\n            case 'pattern':\n              return Validators.pattern(value)(control);\n            case 'minLength':\n              return Validators.minLength(value)(control);\n            case 'maxLength':\n              return Validators.maxLength(value)(control);\n            case 'min':\n              return Validators.min(value)(control);\n            case 'max':\n              return Validators.max(value)(control);\n          }\n        }),\n      )(control);\n    };\n  }\n\n  private wrapNgValidatorFn(field: FormlyFieldConfigCache, validator: any, validatorName?: string) {\n    let validatorOption: ValidatorOption = null;\n    if (typeof validator === 'string') {\n      validatorOption = clone(this.config.getValidator(validator));\n    }\n\n    if (typeof validator === 'object' && validator.name) {\n      validatorOption = clone(this.config.getValidator(validator.name));\n      if (validator.options) {\n        validatorOption.options = validator.options;\n      }\n    }\n\n    if (typeof validator === 'object' && validator.expression) {\n      const { expression, ...options } = validator;\n      validatorOption = {\n        name: validatorName,\n        validation: expression,\n        options: Object.keys(options).length > 0 ? options : null,\n      };\n    }\n\n    if (typeof validator === 'function') {\n      validatorOption = {\n        name: validatorName,\n        validation: validator,\n      };\n    }\n\n    return (control: AbstractControl) => {\n      let errors: any = validatorOption.validation(control, field, validatorOption.options);\n      if (validatorName) {\n        if (isPromise(errors)) {\n          return errors.then((v) => this.handleAsyncResult(field, v, validatorOption));\n        }\n\n        if (isObservable(errors)) {\n          return errors.pipe(map((v) => this.handleAsyncResult(field, v, validatorOption)));\n        }\n\n        errors = !!errors;\n      }\n\n      return this.handleResult(field, errors, validatorOption);\n    };\n  }\n\n  private handleAsyncResult(field: FormlyFieldConfigCache, isValid, options: ValidatorOption) {\n    // workaround for https://github.com/angular/angular/issues/13200\n    field.options.detectChanges(field);\n\n    return this.handleResult(field, !!isValid, options);\n  }\n\n  private handleResult(field: FormlyFieldConfigCache, errors: any, { name, options }: ValidatorOption) {\n    if (typeof errors === 'boolean') {\n      errors = errors ? null : { [name]: options ? options : true };\n    }\n\n    const ctrl = field.formControl;\n    ctrl && ctrl['_childrenErrors'] && ctrl['_childrenErrors'][name] && ctrl['_childrenErrors'][name]();\n\n    if (ctrl && errors && errors[name]) {\n      const errorPath = errors[name].errorPath ? errors[name].errorPath : (options || {}).errorPath;\n\n      const childCtrl = errorPath ? field.formControl.get(errorPath) : null;\n      if (childCtrl) {\n        const { errorPath, ...opts } = errors[name];\n        childCtrl.setErrors({ ...(childCtrl.errors || {}), [name]: opts });\n\n        !ctrl['_childrenErrors'] && defineHiddenProp(ctrl, '_childrenErrors', {});\n        ctrl['_childrenErrors'][name] = () => {\n          const { [name]: toDelete, ...childErrors } = childCtrl.errors || {};\n          childCtrl.setErrors(Object.keys(childErrors).length === 0 ? null : childErrors);\n        };\n      }\n    }\n\n    return errors;\n  }\n}\n","import { FormlyExtension, FormlyFieldConfigCache } from '../../models';\nimport {\n  FormGroup,\n  FormControl,\n  AbstractControlOptions,\n  Validators,\n  ValidatorFn,\n  AsyncValidatorFn,\n} from '@angular/forms';\nimport { getFieldValue, defineHiddenProp } from '../../utils';\nimport { registerControl, findControl, updateValidity as updateControlValidity } from './utils';\nimport { of } from 'rxjs';\n\n/** @experimental */\nexport class FieldFormExtension implements FormlyExtension {\n  private root: FormlyFieldConfigCache;\n  prePopulate(field: FormlyFieldConfigCache) {\n    if (!this.root) {\n      this.root = field;\n    }\n\n    if (field.parent) {\n      Object.defineProperty(field, 'form', {\n        get: () => field.parent.formControl,\n        configurable: true,\n      });\n    }\n  }\n\n  onPopulate(field: FormlyFieldConfigCache) {\n    if (field.key) {\n      this.addFormControl(field);\n    }\n\n    if (field.form && field.hasOwnProperty('fieldGroup') && !field.key) {\n      defineHiddenProp(field, 'formControl', field.form);\n    }\n  }\n\n  postPopulate(field: FormlyFieldConfigCache) {\n    if (this.root !== field) {\n      return;\n    }\n\n    this.root = null;\n    const updateValidity = this.setValidators(field);\n    updateValidity && (field.form as any)._updateTreeValidity();\n  }\n\n  private addFormControl(field: FormlyFieldConfigCache) {\n    let control = findControl(field);\n    if (!control) {\n      const controlOptions: AbstractControlOptions = { updateOn: field.modelOptions.updateOn };\n\n      control = field.fieldGroup\n        ? new FormGroup({}, controlOptions)\n        : new FormControl({ value: getFieldValue(field), disabled: false }, controlOptions);\n    }\n\n    registerControl(field, control);\n  }\n\n  private setValidators(field: FormlyFieldConfigCache) {\n    let updateValidity = false;\n    if (field.key || !field.parent) {\n      const { formControl: c } = field;\n      const disabled = field.templateOptions ? field.templateOptions.disabled : false;\n      if (disabled && c.enabled) {\n        c.disable({ emitEvent: false, onlySelf: true });\n        updateValidity = true;\n      }\n\n      if (null === c.validator || null === c.asyncValidator) {\n        c.setValidators(() => {\n          const v = Validators.compose(this.mergeValidators<ValidatorFn>(field, '_validators'));\n\n          return v ? v(c) : null;\n        });\n        c.setAsyncValidators(() => {\n          const v = Validators.composeAsync(this.mergeValidators<AsyncValidatorFn>(field, '_asyncValidators'));\n\n          return v ? v(c) : of(null);\n        });\n\n        if (!c.parent) {\n          updateControlValidity(c);\n        } else {\n          updateValidity = true;\n        }\n      }\n    }\n\n    (field.fieldGroup || []).forEach((f) => f && this.setValidators(f) && (updateValidity = true));\n\n    return updateValidity;\n  }\n\n  private mergeValidators<T>(field: FormlyFieldConfigCache, type: '_validators' | '_asyncValidators'): T[] {\n    const validators: any = [];\n    const c = field.formControl;\n    if (c && c['_fields'] && c['_fields'].length > 1) {\n      c['_fields']\n        .filter((f: FormlyFieldConfigCache) => !f._hide)\n        .forEach((f: FormlyFieldConfigCache) => validators.push(...f[type]));\n    } else {\n      validators.push(...field[type]);\n    }\n\n    if (field.fieldGroup) {\n      field.fieldGroup\n        .filter((f) => f && !f.key && f.fieldGroup)\n        .forEach((f) => validators.push(...this.mergeValidators(f, type)));\n    }\n\n    return validators;\n  }\n}\n","import { ChangeDetectorRef } from '@angular/core';\nimport { FormlyConfig } from '../../services/formly.config';\nimport { FormlyFieldConfigCache, FormlyValueChangeEvent, FormlyExtension } from '../../models';\nimport {\n  getFieldId,\n  assignFieldValue,\n  isUndefined,\n  getFieldValue,\n  reverseDeepMerge,\n  defineHiddenProp,\n  clone,\n} from '../../utils';\nimport { Subject } from 'rxjs';\n\n/** @experimental */\nexport class CoreExtension implements FormlyExtension {\n  private formId = 0;\n  constructor(private config: FormlyConfig) {}\n\n  prePopulate(field: FormlyFieldConfigCache) {\n    const root = field.parent;\n    this.initRootOptions(field);\n    if (root) {\n      Object.defineProperty(field, 'options', { get: () => root.options, configurable: true });\n      Object.defineProperty(field, 'model', {\n        get: () => (field.key && field.fieldGroup ? getFieldValue(field) : root.model),\n        configurable: true,\n      });\n    }\n\n    this.getFieldComponentInstance(field).prePopulate();\n  }\n\n  onPopulate(field: FormlyFieldConfigCache) {\n    this.initFieldOptions(field);\n    this.getFieldComponentInstance(field).onPopulate();\n    if (field.fieldGroup) {\n      field.fieldGroup.forEach((f, index) => {\n        if (f) {\n          Object.defineProperty(f, 'parent', { get: () => field, configurable: true });\n          Object.defineProperty(f, 'index', { get: () => index, configurable: true });\n        }\n        this.formId++;\n      });\n    }\n  }\n\n  postPopulate(field: FormlyFieldConfigCache) {\n    this.getFieldComponentInstance(field).postPopulate();\n  }\n\n  private initRootOptions(field: FormlyFieldConfigCache) {\n    if (field.parent) {\n      return;\n    }\n\n    const options = field.options;\n    field.options.formState = field.options.formState || {};\n    if (!options.showError) {\n      options.showError = this.config.extras.showError;\n    }\n\n    if (!options.fieldChanges) {\n      defineHiddenProp(options, 'fieldChanges', new Subject<FormlyValueChangeEvent>());\n    }\n\n    if (!options._hiddenFieldsForCheck) {\n      options._hiddenFieldsForCheck = [];\n    }\n\n    options._markForCheck = (f) => {\n      console.warn(`Formly: 'options._markForCheck' is deprecated since v6.0, use 'options.detectChanges' instead.`);\n      options.detectChanges(f);\n    };\n\n    options.detectChanges = (f: FormlyFieldConfigCache) => {\n      if (f._componentRefs) {\n        f._componentRefs.forEach((ref) => {\n          // NOTE: we cannot use ref.changeDetectorRef, see https://github.com/ngx-formly/ngx-formly/issues/2191\n          const changeDetectorRef = ref.injector.get(ChangeDetectorRef);\n          changeDetectorRef.markForCheck();\n        });\n      }\n\n      if (f.fieldGroup) {\n        f.fieldGroup.forEach((f) => f && options.detectChanges(f));\n      }\n    };\n\n    options.resetModel = (model?: any) => {\n      model = clone(model ?? options._initialModel);\n      if (field.model) {\n        Object.keys(field.model).forEach((k) => delete field.model[k]);\n        Object.assign(field.model, model || {});\n      }\n\n      options.build(field);\n      field.form.reset(model);\n      if (options.parentForm && options.parentForm.control === field.formControl) {\n        (options.parentForm as { submitted: boolean }).submitted = false;\n      }\n    };\n\n    options.updateInitialValue = () => (options._initialModel = clone(field.model));\n    field.options.updateInitialValue();\n  }\n\n  private initFieldOptions(field: FormlyFieldConfigCache) {\n    reverseDeepMerge(field, {\n      id: getFieldId(`formly_${this.formId}`, field, field['index']),\n      hooks: {},\n      modelOptions: {},\n      templateOptions:\n        !field.type || !field.key\n          ? {}\n          : {\n              label: '',\n              placeholder: '',\n              focus: false,\n              disabled: false,\n            },\n    });\n\n    if (\n      field.type !== 'formly-template' &&\n      (field.template || (field.expressionProperties && field.expressionProperties.template))\n    ) {\n      field.type = 'formly-template';\n    }\n\n    if (!field.type && field.fieldGroup) {\n      field.type = 'formly-group';\n    }\n\n    if (field.type) {\n      this.config.getMergedField(field);\n    }\n\n    if (!field['autoClear'] && !isUndefined(field.defaultValue) && isUndefined(getFieldValue(field))) {\n      assignFieldValue(field, field.defaultValue);\n    }\n\n    field.wrappers = field.wrappers || [];\n  }\n\n  private getFieldComponentInstance(field: FormlyFieldConfigCache) {\n    const componentRef = this.config.resolveFieldTypeRef(field);\n    const instance: FormlyExtension = componentRef ? (componentRef.instance as any) : {};\n\n    return {\n      prePopulate: () => instance.prePopulate && instance.prePopulate(field),\n      onPopulate: () => instance.onPopulate && instance.onPopulate(field),\n      postPopulate: () => instance.postPopulate && instance.postPopulate(field),\n    };\n  }\n}\n","import { NgModule, ModuleWithProviders, Inject, Optional } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormlyForm } from './components/formly.form';\nimport { FormlyField } from './components/formly.field';\nimport { FormlyAttributes } from './templates/formly.attributes';\nimport { FormlyConfig, FORMLY_CONFIG } from './services/formly.config';\nimport { FormlyFormBuilder } from './services/formly.builder';\nimport { FormlyGroup } from './templates/formly.group';\nimport { FormlyValidationMessage } from './templates/formly.validation-message';\nimport { FormlyTemplateType } from './templates/field-template.type';\n\nimport { FieldExpressionExtension } from './extensions/field-expression/field-expression';\nimport { FieldValidationExtension } from './extensions/field-validation/field-validation';\nimport { FieldFormExtension } from './extensions/field-form/field-form';\nimport { CoreExtension } from './extensions/core/core';\nimport { ConfigOption } from './models';\n\nexport function defaultFormlyConfig(config: FormlyConfig): ConfigOption {\n  return {\n    types: [\n      { name: 'formly-group', component: FormlyGroup },\n      { name: 'formly-template', component: FormlyTemplateType },\n    ],\n    extensions: [\n      { name: 'core', extension: new CoreExtension(config) },\n      { name: 'field-validation', extension: new FieldValidationExtension(config) },\n      { name: 'field-form', extension: new FieldFormExtension() },\n      { name: 'field-expression', extension: new FieldExpressionExtension() },\n    ],\n  };\n}\n\n@NgModule({\n  declarations: [FormlyForm, FormlyField, FormlyAttributes, FormlyGroup, FormlyValidationMessage, FormlyTemplateType],\n  exports: [FormlyForm, FormlyField, FormlyAttributes, FormlyGroup, FormlyValidationMessage],\n  imports: [CommonModule],\n})\nexport class FormlyModule {\n  static forRoot(config: ConfigOption = {}): ModuleWithProviders<FormlyModule> {\n    return {\n      ngModule: FormlyModule,\n      providers: [\n        { provide: FORMLY_CONFIG, multi: true, useFactory: defaultFormlyConfig, deps: [FormlyConfig] },\n        { provide: FORMLY_CONFIG, useValue: config, multi: true },\n        FormlyConfig,\n        FormlyFormBuilder,\n      ],\n    };\n  }\n\n  static forChild(config: ConfigOption = {}): ModuleWithProviders<FormlyModule> {\n    return {\n      ngModule: FormlyModule,\n      providers: [{ provide: FORMLY_CONFIG, useValue: config, multi: true }, FormlyFormBuilder],\n    };\n  }\n\n  constructor(configService: FormlyConfig, @Optional() @Inject(FORMLY_CONFIG) configs: ConfigOption[] = []) {\n    if (!configs) {\n      return;\n    }\n\n    configs.forEach((config) => configService.addConfig(config));\n  }\n}\n"]}