import { ChangeDetectorRef } from '@angular/core';
import { getFieldId, assignFieldValue, isUndefined, getFieldValue, reverseDeepMerge, defineHiddenProp, clone, } from '../../utils';
import { Subject } from 'rxjs';
/** @experimental */
export class CoreExtension {
    constructor(config) {
        this.config = config;
        this.formId = 0;
    }
    prePopulate(field) {
        const root = field.parent;
        this.initRootOptions(field);
        if (root) {
            Object.defineProperty(field, 'options', { get: () => root.options, configurable: true });
            Object.defineProperty(field, 'model', {
                get: () => (field.key && field.fieldGroup ? getFieldValue(field) : root.model),
                configurable: true,
            });
        }
        this.getFieldComponentInstance(field).prePopulate();
    }
    onPopulate(field) {
        this.initFieldOptions(field);
        this.getFieldComponentInstance(field).onPopulate();
        if (field.fieldGroup) {
            field.fieldGroup.forEach((f, index) => {
                if (f) {
                    Object.defineProperty(f, 'parent', { get: () => field, configurable: true });
                    Object.defineProperty(f, 'index', { get: () => index, configurable: true });
                }
                this.formId++;
            });
        }
    }
    postPopulate(field) {
        this.getFieldComponentInstance(field).postPopulate();
    }
    initRootOptions(field) {
        if (field.parent) {
            return;
        }
        const options = field.options;
        field.options.formState = field.options.formState || {};
        if (!options.showError) {
            options.showError = this.config.extras.showError;
        }
        if (!options.fieldChanges) {
            defineHiddenProp(options, 'fieldChanges', new Subject());
        }
        if (!options._hiddenFieldsForCheck) {
            options._hiddenFieldsForCheck = [];
        }
        options._markForCheck = (f) => {
            console.warn(`Formly: 'options._markForCheck' is deprecated since v6.0, use 'options.detectChanges' instead.`);
            options.detectChanges(f);
        };
        options.detectChanges = (f) => {
            if (f._componentRefs) {
                f._componentRefs.forEach((ref) => {
                    // NOTE: we cannot use ref.changeDetectorRef, see https://github.com/ngx-formly/ngx-formly/issues/2191
                    const changeDetectorRef = ref.injector.get(ChangeDetectorRef);
                    changeDetectorRef.markForCheck();
                });
            }
            if (f.fieldGroup) {
                f.fieldGroup.forEach((f) => f && options.detectChanges(f));
            }
        };
        options.resetModel = (model) => {
            model = clone(model !== null && model !== void 0 ? model : options._initialModel);
            if (field.model) {
                Object.keys(field.model).forEach((k) => delete field.model[k]);
                Object.assign(field.model, model || {});
            }
            options.build(field);
            field.form.reset(model);
            if (options.parentForm && options.parentForm.control === field.formControl) {
                options.parentForm.submitted = false;
            }
        };
        options.updateInitialValue = () => (options._initialModel = clone(field.model));
        field.options.updateInitialValue();
    }
    initFieldOptions(field) {
        reverseDeepMerge(field, {
            id: getFieldId(`formly_${this.formId}`, field, field['index']),
            hooks: {},
            modelOptions: {},
            templateOptions: !field.type || !field.key
                ? {}
                : {
                    label: '',
                    placeholder: '',
                    focus: false,
                    disabled: false,
                },
        });
        if (field.type !== 'formly-template' &&
            (field.template || (field.expressionProperties && field.expressionProperties.template))) {
            field.type = 'formly-template';
        }
        if (!field.type && field.fieldGroup) {
            field.type = 'formly-group';
        }
        if (field.type) {
            this.config.getMergedField(field);
        }
        if (!field['autoClear'] && !isUndefined(field.defaultValue) && isUndefined(getFieldValue(field))) {
            assignFieldValue(field, field.defaultValue);
        }
        field.wrappers = field.wrappers || [];
    }
    getFieldComponentInstance(field) {
        const componentRef = this.config.resolveFieldTypeRef(field);
        const instance = componentRef ? componentRef.instance : {};
        return {
            prePopulate: () => instance.prePopulate && instance.prePopulate(field),
            onPopulate: () => instance.onPopulate && instance.onPopulate(field),
            postPopulate: () => instance.postPopulate && instance.postPopulate(field),
        };
    }
}
//# sourceMappingURL=data:application/json;base64,