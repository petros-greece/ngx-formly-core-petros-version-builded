import { isObservable } from 'rxjs';
import { AbstractControl } from '@angular/forms';
export function getFieldId(formId, field, index) {
    if (field.id) {
        return field.id;
    }
    let type = field.type;
    if (!type && field.template) {
        type = 'template';
    }
    return [formId, type, field.key, index].join('_');
}
export function getKeyPath(field) {
    if (!field.key) {
        return [];
    }
    /* We store the keyPath in the field for performance reasons. This function will be called frequently. */
    if (!field._keyPath || field._keyPath.key !== field.key) {
        const key = field.key.indexOf('[') === -1 ? field.key : field.key.replace(/\[(\w+)\]/g, '.$1');
        defineHiddenProp(field, '_keyPath', { key: field.key, path: key.indexOf('.') !== -1 ? key.split('.') : [key] });
    }
    return field._keyPath.path.slice(0);
}
export const FORMLY_VALIDATORS = ['required', 'pattern', 'minLength', 'maxLength', 'min', 'max'];
export function assignFieldValue(field, value, autoClear = false) {
    let paths = getKeyPath(field);
    while (field.parent) {
        field = field.parent;
        paths = [...getKeyPath(field), ...paths];
    }
    if (autoClear && value === undefined && field['autoClear'] && !field.formControl.parent) {
        const k = paths.pop();
        const m = paths.reduce((model, path) => model[path] || {}, field.parent.model);
        delete m[k];
        return;
    }
    assignModelValue(field.model, paths, value);
}
export function assignModelValue(model, paths, value) {
    for (let i = 0; i < paths.length - 1; i++) {
        const path = paths[i];
        if (!model[path] || !isObject(model[path])) {
            model[path] = /^\d+$/.test(paths[i + 1]) ? [] : {};
        }
        model = model[path];
    }
    model[paths[paths.length - 1]] = clone(value);
}
export function getFieldInitialValue(field) {
    let value = field.options['_initialModel'];
    let paths = getKeyPath(field);
    while (field.parent) {
        field = field.parent;
        paths = [...getKeyPath(field), ...paths];
    }
    for (const path of paths) {
        if (!value) {
            return undefined;
        }
        value = value[path];
    }
    return value;
}
export function getFieldValue(field) {
    let model = field.parent ? field.parent.model : field.model;
    for (const path of getKeyPath(field)) {
        if (!model) {
            return model;
        }
        model = model[path];
    }
    return model;
}
export function reverseDeepMerge(dest, ...args) {
    args.forEach((src) => {
        for (const srcArg in src) {
            if (isNil(dest[srcArg]) || isBlankString(dest[srcArg])) {
                dest[srcArg] = clone(src[srcArg]);
            }
            else if (objAndSameType(dest[srcArg], src[srcArg])) {
                reverseDeepMerge(dest[srcArg], src[srcArg]);
            }
        }
    });
    return dest;
}
// check a value is null or undefined
export function isNil(value) {
    return value == null;
}
export function isUndefined(value) {
    return value === undefined;
}
export function isBlankString(value) {
    return value === '';
}
export function isFunction(value) {
    return typeof value === 'function';
}
export function objAndSameType(obj1, obj2) {
    return (isObject(obj1) &&
        isObject(obj2) &&
        Object.getPrototypeOf(obj1) === Object.getPrototypeOf(obj2) &&
        !(Array.isArray(obj1) || Array.isArray(obj2)));
}
export function isObject(x) {
    return x != null && typeof x === 'object';
}
export function isPromise(obj) {
    return !!obj && typeof obj.then === 'function';
}
export function clone(value) {
    if (!isObject(value) ||
        isObservable(value) ||
        /* instanceof SafeHtmlImpl */ value.changingThisBreaksApplicationSecurity ||
        ['RegExp', 'FileList', 'File', 'Blob'].indexOf(value.constructor.name) !== -1) {
        return value;
    }
    // https://github.com/moment/moment/blob/master/moment.js#L252
    if (value._isAMomentObject && isFunction(value.clone)) {
        return value.clone();
    }
    if (value instanceof AbstractControl) {
        return null;
    }
    if (value instanceof Date) {
        return new Date(value.getTime());
    }
    if (Array.isArray(value)) {
        return value.slice(0).map((v) => clone(v));
    }
    // best way to clone a js object maybe
    // https://stackoverflow.com/questions/41474986/how-to-clone-a-javascript-es6-class-instance
    const proto = Object.getPrototypeOf(value);
    let c = Object.create(proto);
    c = Object.setPrototypeOf(c, proto);
    // need to make a deep copy so we dont use Object.assign
    // also Object.assign wont copy property descriptor exactly
    return Object.keys(value).reduce((newVal, prop) => {
        const propDesc = Object.getOwnPropertyDescriptor(value, prop);
        if (propDesc.get) {
            Object.defineProperty(newVal, prop, propDesc);
        }
        else {
            newVal[prop] = clone(value[prop]);
        }
        return newVal;
    }, c);
}
export function defineHiddenProp(field, prop, defaultValue) {
    Object.defineProperty(field, prop, { enumerable: false, writable: true, configurable: true });
    field[prop] = defaultValue;
}
export function observeDeep({ source, paths, target, setFn }) {
    const observers = [];
    if (paths.length === 0) {
        target = source;
    }
    Object.keys(target).forEach((path) => {
        let unsubscribe = () => { };
        const observer = observe(source, [...paths, path], ({ firstChange, currentValue }) => {
            !firstChange && setFn();
            unsubscribe();
            const i = observers.indexOf(unsubscribe);
            if (i > -1) {
                observers.splice(i, 1);
            }
            if (isObject(currentValue) && currentValue.constructor.name === 'Object') {
                unsubscribe = observeDeep({ source, setFn, paths: [...paths, path], target: currentValue });
                observers.push(unsubscribe);
            }
        });
        observers.push(() => observer.unsubscribe());
    });
    return () => {
        observers.forEach((observer) => observer());
    };
}
export function observe(o, paths, setFn) {
    if (!o._observers) {
        defineHiddenProp(o, '_observers', {});
    }
    let target = o;
    for (let i = 0; i < paths.length - 1; i++) {
        if (!target[paths[i]] || !isObject(target[paths[i]])) {
            target[paths[i]] = /^\d+$/.test(paths[i + 1]) ? [] : {};
        }
        target = target[paths[i]];
    }
    const key = paths[paths.length - 1];
    const prop = paths.join('.');
    if (!o._observers[prop]) {
        o._observers[prop] = { value: target[key], onChange: [] };
    }
    const state = o._observers[prop];
    if (state.onChange.indexOf(setFn) === -1) {
        state.onChange.push(setFn);
        setFn({ currentValue: state.value, firstChange: true });
        if (state.onChange.length === 1) {
            const { enumerable } = Object.getOwnPropertyDescriptor(target, key) || { enumerable: true };
            Object.defineProperty(target, key, {
                enumerable,
                configurable: true,
                get: () => state.value,
                set: (currentValue) => {
                    if (currentValue !== state.value) {
                        const previousValue = state.value;
                        state.value = currentValue;
                        state.onChange.forEach((changeFn) => changeFn({ previousValue, currentValue, firstChange: false }));
                    }
                },
            });
        }
    }
    return {
        setValue(value) {
            state.value = value;
        },
        unsubscribe() {
            state.onChange = state.onChange.filter((changeFn) => changeFn !== setFn);
        },
    };
}
export function reduceFormUpdateValidityCalls(form, action) {
    const updateValidity = form._updateTreeValidity.bind(form);
    let updateValidityArgs = null;
    form._updateTreeValidity = (...args) => (updateValidityArgs = args);
    action();
    updateValidityArgs && updateValidity(updateValidityArgs);
    form._updateTreeValidity = updateValidity;
}
//# sourceMappingURL=data:application/json;base64,