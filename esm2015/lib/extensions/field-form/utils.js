import { FormArray, FormGroup, FormControl } from '@angular/forms';
import { getKeyPath, getFieldValue, isNil, defineHiddenProp, observe, assignFieldValue, isUndefined, } from '../../utils';
export function unregisterControl(field, emitEvent = false) {
    const form = field.formControl.parent;
    if (!form) {
        return;
    }
    const control = field.formControl;
    const opts = { emitEvent };
    if (form instanceof FormArray) {
        const key = form.controls.findIndex((c) => c === control);
        if (key !== -1) {
            updateControl(form, opts, () => form.removeAt(key));
        }
    }
    else if (form instanceof FormGroup) {
        const paths = getKeyPath(field);
        const key = paths[paths.length - 1];
        if (form.get([key]) === control) {
            updateControl(form, opts, () => form.removeControl(key));
        }
    }
    control.setParent(null);
    if (field['autoClear']) {
        if (field.parent.model) {
            delete field.parent.model[field.key];
        }
        control.reset({ value: undefined, disabled: control.disabled }, { emitEvent: field.fieldGroup ? false : emitEvent, onlySelf: true });
    }
}
export function findControl(field) {
    if (field.formControl) {
        return field.formControl;
    }
    const form = field.parent.formControl;
    return form ? form.get(getKeyPath(field)) : null;
}
export function registerControl(field, control, emitEvent = false) {
    control = control || field.formControl;
    if (!control['_fields']) {
        defineHiddenProp(control, '_fields', []);
    }
    if (control['_fields'].indexOf(field) === -1) {
        control['_fields'].push(field);
    }
    if (!field.formControl && control) {
        defineHiddenProp(field, 'formControl', control);
        field.templateOptions.disabled = !!field.templateOptions.disabled;
        const disabledObserver = observe(field, ['templateOptions', 'disabled'], ({ firstChange, currentValue }) => {
            if (!firstChange) {
                currentValue ? field.formControl.disable() : field.formControl.enable();
            }
        });
        if (control.registerOnDisabledChange) {
            control.registerOnDisabledChange(disabledObserver.setValue);
        }
    }
    if (!field.form) {
        return;
    }
    let form = field.form;
    const paths = getKeyPath(field);
    if (!form['_formlyControls']) {
        defineHiddenProp(form, '_formlyControls', {});
    }
    form['_formlyControls'][paths.join('.')] = control;
    for (let i = 0; i < paths.length - 1; i++) {
        const path = paths[i];
        if (!form.get([path])) {
            registerControl({
                key: path,
                formControl: new FormGroup({}),
                form,
                parent: {},
            });
        }
        form = form.get([path]);
    }
    if (field['autoClear'] && !isUndefined(field.defaultValue) && isUndefined(getFieldValue(field))) {
        assignFieldValue(field, field.defaultValue);
    }
    const value = getFieldValue(field);
    if (!(isNil(control.value) && isNil(value)) && control.value !== value && control instanceof FormControl) {
        control.patchValue(value, { emitEvent: false });
    }
    const key = paths[paths.length - 1];
    if (!field._hide && form.get([key]) !== control) {
        updateControl(form, { emitEvent }, () => form.setControl(key, control));
    }
}
export function updateValidity(c) {
    const status = c.status;
    c.updateValueAndValidity({ emitEvent: false });
    if (status !== c.status) {
        c.statusChanges.emit(c.status);
    }
}
function updateControl(form, opts, action) {
    /**
     *  workaround for https://github.com/angular/angular/issues/27679
     */
    if (form instanceof FormGroup && !form['__patchForEachChild']) {
        defineHiddenProp(form, '__patchForEachChild', true);
        form._forEachChild = (cb) => {
            Object.keys(form.controls).forEach((k) => form.controls[k] && cb(form.controls[k], k));
        };
    }
    /**
     * workaround for https://github.com/angular/angular/issues/20439
     */
    const updateValueAndValidity = form.updateValueAndValidity.bind(form);
    if (opts.emitEvent === false) {
        form.updateValueAndValidity = (opts) => {
            updateValueAndValidity(Object.assign(Object.assign({}, (opts || {})), { emitEvent: false }));
        };
    }
    action();
    if (opts.emitEvent === false) {
        form.updateValueAndValidity = updateValueAndValidity;
    }
}
//# sourceMappingURL=data:application/json;base64,