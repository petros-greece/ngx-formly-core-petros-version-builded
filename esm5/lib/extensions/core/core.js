import { ChangeDetectorRef } from '@angular/core';
import { getFieldId, assignFieldValue, isUndefined, getFieldValue, reverseDeepMerge, defineHiddenProp, clone, } from '../../utils';
import { Subject } from 'rxjs';
/** @experimental */
var CoreExtension = /** @class */ (function () {
    function CoreExtension(config) {
        this.config = config;
        this.formId = 0;
    }
    CoreExtension.prototype.prePopulate = function (field) {
        var root = field.parent;
        this.initRootOptions(field);
        if (root) {
            Object.defineProperty(field, 'options', { get: function () { return root.options; }, configurable: true });
            Object.defineProperty(field, 'model', {
                get: function () { return (field.key && field.fieldGroup ? getFieldValue(field) : root.model); },
                configurable: true,
            });
        }
        this.getFieldComponentInstance(field).prePopulate();
    };
    CoreExtension.prototype.onPopulate = function (field) {
        var _this = this;
        this.initFieldOptions(field);
        this.getFieldComponentInstance(field).onPopulate();
        if (field.fieldGroup) {
            field.fieldGroup.forEach(function (f, index) {
                if (f) {
                    Object.defineProperty(f, 'parent', { get: function () { return field; }, configurable: true });
                    Object.defineProperty(f, 'index', { get: function () { return index; }, configurable: true });
                }
                _this.formId++;
            });
        }
    };
    CoreExtension.prototype.postPopulate = function (field) {
        this.getFieldComponentInstance(field).postPopulate();
    };
    CoreExtension.prototype.initRootOptions = function (field) {
        if (field.parent) {
            return;
        }
        var options = field.options;
        field.options.formState = field.options.formState || {};
        if (!options.showError) {
            options.showError = this.config.extras.showError;
        }
        if (!options.fieldChanges) {
            defineHiddenProp(options, 'fieldChanges', new Subject());
        }
        if (!options._hiddenFieldsForCheck) {
            options._hiddenFieldsForCheck = [];
        }
        options._markForCheck = function (f) {
            console.warn("Formly: 'options._markForCheck' is deprecated since v6.0, use 'options.detectChanges' instead.");
            options.detectChanges(f);
        };
        options.detectChanges = function (f) {
            if (f._componentRefs) {
                f._componentRefs.forEach(function (ref) {
                    // NOTE: we cannot use ref.changeDetectorRef, see https://github.com/ngx-formly/ngx-formly/issues/2191
                    var changeDetectorRef = ref.injector.get(ChangeDetectorRef);
                    changeDetectorRef.markForCheck();
                });
            }
            if (f.fieldGroup) {
                f.fieldGroup.forEach(function (f) { return f && options.detectChanges(f); });
            }
        };
        options.resetModel = function (model) {
            model = clone(model !== null && model !== void 0 ? model : options._initialModel);
            if (field.model) {
                Object.keys(field.model).forEach(function (k) { return delete field.model[k]; });
                Object.assign(field.model, model || {});
            }
            options.build(field);
            field.form.reset(model);
            if (options.parentForm && options.parentForm.control === field.formControl) {
                options.parentForm.submitted = false;
            }
        };
        options.updateInitialValue = function () { return (options._initialModel = clone(field.model)); };
        field.options.updateInitialValue();
    };
    CoreExtension.prototype.initFieldOptions = function (field) {
        reverseDeepMerge(field, {
            id: getFieldId("formly_" + this.formId, field, field['index']),
            hooks: {},
            modelOptions: {},
            templateOptions: !field.type || !field.key
                ? {}
                : {
                    label: '',
                    placeholder: '',
                    focus: false,
                    disabled: false,
                },
        });
        if (field.type !== 'formly-template' &&
            (field.template || (field.expressionProperties && field.expressionProperties.template))) {
            field.type = 'formly-template';
        }
        if (!field.type && field.fieldGroup) {
            field.type = 'formly-group';
        }
        if (field.type) {
            this.config.getMergedField(field);
        }
        if (!field['autoClear'] && !isUndefined(field.defaultValue) && isUndefined(getFieldValue(field))) {
            assignFieldValue(field, field.defaultValue);
        }
        field.wrappers = field.wrappers || [];
    };
    CoreExtension.prototype.getFieldComponentInstance = function (field) {
        var componentRef = this.config.resolveFieldTypeRef(field);
        var instance = componentRef ? componentRef.instance : {};
        return {
            prePopulate: function () { return instance.prePopulate && instance.prePopulate(field); },
            onPopulate: function () { return instance.onPopulate && instance.onPopulate(field); },
            postPopulate: function () { return instance.postPopulate && instance.postPopulate(field); },
        };
    };
    return CoreExtension;
}());
export { CoreExtension };
//# sourceMappingURL=data:application/json;base64,