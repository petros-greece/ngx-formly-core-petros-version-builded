import { __read, __spread } from "tslib";
import { FormGroup, FormControl, Validators, } from '@angular/forms';
import { getFieldValue, defineHiddenProp } from '../../utils';
import { registerControl, findControl, updateValidity as updateControlValidity } from './utils';
import { of } from 'rxjs';
/** @experimental */
var FieldFormExtension = /** @class */ (function () {
    function FieldFormExtension() {
    }
    FieldFormExtension.prototype.prePopulate = function (field) {
        if (!this.root) {
            this.root = field;
        }
        if (field.parent) {
            Object.defineProperty(field, 'form', {
                get: function () { return field.parent.formControl; },
                configurable: true,
            });
        }
    };
    FieldFormExtension.prototype.onPopulate = function (field) {
        if (field.key) {
            this.addFormControl(field);
        }
        if (field.form && field.hasOwnProperty('fieldGroup') && !field.key) {
            defineHiddenProp(field, 'formControl', field.form);
        }
    };
    FieldFormExtension.prototype.postPopulate = function (field) {
        if (this.root !== field) {
            return;
        }
        this.root = null;
        var updateValidity = this.setValidators(field);
        updateValidity && field.form._updateTreeValidity();
    };
    FieldFormExtension.prototype.addFormControl = function (field) {
        var control = findControl(field);
        if (!control) {
            var controlOptions = { updateOn: field.modelOptions.updateOn };
            control = field.fieldGroup
                ? new FormGroup({}, controlOptions)
                : new FormControl({ value: getFieldValue(field), disabled: false }, controlOptions);
        }
        registerControl(field, control);
    };
    FieldFormExtension.prototype.setValidators = function (field) {
        var _this = this;
        var updateValidity = false;
        if (field.key || !field.parent) {
            var c_1 = field.formControl;
            var disabled = field.templateOptions ? field.templateOptions.disabled : false;
            if (disabled && c_1.enabled) {
                c_1.disable({ emitEvent: false, onlySelf: true });
                updateValidity = true;
            }
            if (null === c_1.validator || null === c_1.asyncValidator) {
                c_1.setValidators(function () {
                    var v = Validators.compose(_this.mergeValidators(field, '_validators'));
                    return v ? v(c_1) : null;
                });
                c_1.setAsyncValidators(function () {
                    var v = Validators.composeAsync(_this.mergeValidators(field, '_asyncValidators'));
                    return v ? v(c_1) : of(null);
                });
                if (!c_1.parent) {
                    updateControlValidity(c_1);
                }
                else {
                    updateValidity = true;
                }
            }
        }
        (field.fieldGroup || []).forEach(function (f) { return f && _this.setValidators(f) && (updateValidity = true); });
        return updateValidity;
    };
    FieldFormExtension.prototype.mergeValidators = function (field, type) {
        var _this = this;
        var validators = [];
        var c = field.formControl;
        if (c && c['_fields'] && c['_fields'].length > 1) {
            c['_fields']
                .filter(function (f) { return !f._hide; })
                .forEach(function (f) { return validators.push.apply(validators, __spread(f[type])); });
        }
        else {
            validators.push.apply(validators, __spread(field[type]));
        }
        if (field.fieldGroup) {
            field.fieldGroup
                .filter(function (f) { return f && !f.key && f.fieldGroup; })
                .forEach(function (f) { return validators.push.apply(validators, __spread(_this.mergeValidators(f, type))); });
        }
        return validators;
    };
    return FieldFormExtension;
}());
export { FieldFormExtension };
//# sourceMappingURL=data:application/json;base64,