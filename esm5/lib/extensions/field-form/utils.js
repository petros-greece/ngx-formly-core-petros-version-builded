import { __assign } from "tslib";
import { FormArray, FormGroup, FormControl } from '@angular/forms';
import { getKeyPath, getFieldValue, isNil, defineHiddenProp, observe, assignFieldValue, isUndefined, } from '../../utils';
export function unregisterControl(field, emitEvent) {
    if (emitEvent === void 0) { emitEvent = false; }
    var form = field.formControl.parent;
    if (!form) {
        return;
    }
    var control = field.formControl;
    var opts = { emitEvent: emitEvent };
    if (form instanceof FormArray) {
        var key_1 = form.controls.findIndex(function (c) { return c === control; });
        if (key_1 !== -1) {
            updateControl(form, opts, function () { return form.removeAt(key_1); });
        }
    }
    else if (form instanceof FormGroup) {
        var paths = getKeyPath(field);
        var key_2 = paths[paths.length - 1];
        if (form.get([key_2]) === control) {
            updateControl(form, opts, function () { return form.removeControl(key_2); });
        }
    }
    control.setParent(null);
    if (field['autoClear']) {
        if (field.parent.model) {
            delete field.parent.model[field.key];
        }
        control.reset({ value: undefined, disabled: control.disabled }, { emitEvent: field.fieldGroup ? false : emitEvent, onlySelf: true });
    }
}
export function findControl(field) {
    if (field.formControl) {
        return field.formControl;
    }
    var form = field.parent.formControl;
    return form ? form.get(getKeyPath(field)) : null;
}
export function registerControl(field, control, emitEvent) {
    if (emitEvent === void 0) { emitEvent = false; }
    control = control || field.formControl;
    if (!control['_fields']) {
        defineHiddenProp(control, '_fields', []);
    }
    if (control['_fields'].indexOf(field) === -1) {
        control['_fields'].push(field);
    }
    if (!field.formControl && control) {
        defineHiddenProp(field, 'formControl', control);
        field.templateOptions.disabled = !!field.templateOptions.disabled;
        var disabledObserver = observe(field, ['templateOptions', 'disabled'], function (_a) {
            var firstChange = _a.firstChange, currentValue = _a.currentValue;
            if (!firstChange) {
                currentValue ? field.formControl.disable() : field.formControl.enable();
            }
        });
        if (control.registerOnDisabledChange) {
            control.registerOnDisabledChange(disabledObserver.setValue);
        }
    }
    if (!field.form) {
        return;
    }
    var form = field.form;
    var paths = getKeyPath(field);
    if (!form['_formlyControls']) {
        defineHiddenProp(form, '_formlyControls', {});
    }
    form['_formlyControls'][paths.join('.')] = control;
    for (var i = 0; i < paths.length - 1; i++) {
        var path = paths[i];
        if (!form.get([path])) {
            registerControl({
                key: path,
                formControl: new FormGroup({}),
                form: form,
                parent: {},
            });
        }
        form = form.get([path]);
    }
    if (field['autoClear'] && !isUndefined(field.defaultValue) && isUndefined(getFieldValue(field))) {
        assignFieldValue(field, field.defaultValue);
    }
    var value = getFieldValue(field);
    if (!(isNil(control.value) && isNil(value)) && control.value !== value && control instanceof FormControl) {
        control.patchValue(value, { emitEvent: false });
    }
    var key = paths[paths.length - 1];
    if (!field._hide && form.get([key]) !== control) {
        updateControl(form, { emitEvent: emitEvent }, function () { return form.setControl(key, control); });
    }
}
export function updateValidity(c) {
    var status = c.status;
    c.updateValueAndValidity({ emitEvent: false });
    if (status !== c.status) {
        c.statusChanges.emit(c.status);
    }
}
function updateControl(form, opts, action) {
    /**
     *  workaround for https://github.com/angular/angular/issues/27679
     */
    if (form instanceof FormGroup && !form['__patchForEachChild']) {
        defineHiddenProp(form, '__patchForEachChild', true);
        form._forEachChild = function (cb) {
            Object.keys(form.controls).forEach(function (k) { return form.controls[k] && cb(form.controls[k], k); });
        };
    }
    /**
     * workaround for https://github.com/angular/angular/issues/20439
     */
    var updateValueAndValidity = form.updateValueAndValidity.bind(form);
    if (opts.emitEvent === false) {
        form.updateValueAndValidity = function (opts) {
            updateValueAndValidity(__assign(__assign({}, (opts || {})), { emitEvent: false }));
        };
    }
    action();
    if (opts.emitEvent === false) {
        form.updateValueAndValidity = updateValueAndValidity;
    }
}
//# sourceMappingURL=data:application/json;base64,