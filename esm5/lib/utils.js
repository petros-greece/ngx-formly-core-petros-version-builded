import { __read, __spread, __values } from "tslib";
import { isObservable } from 'rxjs';
import { AbstractControl } from '@angular/forms';
export function getFieldId(formId, field, index) {
    if (field.id) {
        return field.id;
    }
    var type = field.type;
    if (!type && field.template) {
        type = 'template';
    }
    return [formId, type, field.key, index].join('_');
}
export function getKeyPath(field) {
    if (!field.key) {
        return [];
    }
    /* We store the keyPath in the field for performance reasons. This function will be called frequently. */
    if (!field._keyPath || field._keyPath.key !== field.key) {
        var key = field.key.indexOf('[') === -1 ? field.key : field.key.replace(/\[(\w+)\]/g, '.$1');
        defineHiddenProp(field, '_keyPath', { key: field.key, path: key.indexOf('.') !== -1 ? key.split('.') : [key] });
    }
    return field._keyPath.path.slice(0);
}
export var FORMLY_VALIDATORS = ['required', 'pattern', 'minLength', 'maxLength', 'min', 'max'];
export function assignFieldValue(field, value, autoClear) {
    if (autoClear === void 0) { autoClear = false; }
    var paths = getKeyPath(field);
    while (field.parent) {
        field = field.parent;
        paths = __spread(getKeyPath(field), paths);
    }
    if (autoClear && value === undefined && field['autoClear'] && !field.formControl.parent) {
        var k = paths.pop();
        var m = paths.reduce(function (model, path) { return model[path] || {}; }, field.parent.model);
        delete m[k];
        return;
    }
    assignModelValue(field.model, paths, value);
}
export function assignModelValue(model, paths, value) {
    for (var i = 0; i < paths.length - 1; i++) {
        var path = paths[i];
        if (!model[path] || !isObject(model[path])) {
            model[path] = /^\d+$/.test(paths[i + 1]) ? [] : {};
        }
        model = model[path];
    }
    model[paths[paths.length - 1]] = clone(value);
}
export function getFieldInitialValue(field) {
    var e_1, _a;
    var value = field.options['_initialModel'];
    var paths = getKeyPath(field);
    while (field.parent) {
        field = field.parent;
        paths = __spread(getKeyPath(field), paths);
    }
    try {
        for (var paths_1 = __values(paths), paths_1_1 = paths_1.next(); !paths_1_1.done; paths_1_1 = paths_1.next()) {
            var path = paths_1_1.value;
            if (!value) {
                return undefined;
            }
            value = value[path];
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (paths_1_1 && !paths_1_1.done && (_a = paths_1.return)) _a.call(paths_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return value;
}
export function getFieldValue(field) {
    var e_2, _a;
    var model = field.parent ? field.parent.model : field.model;
    try {
        for (var _b = __values(getKeyPath(field)), _c = _b.next(); !_c.done; _c = _b.next()) {
            var path = _c.value;
            if (!model) {
                return model;
            }
            model = model[path];
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_2) throw e_2.error; }
    }
    return model;
}
export function reverseDeepMerge(dest) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
    }
    args.forEach(function (src) {
        for (var srcArg in src) {
            if (isNil(dest[srcArg]) || isBlankString(dest[srcArg])) {
                dest[srcArg] = clone(src[srcArg]);
            }
            else if (objAndSameType(dest[srcArg], src[srcArg])) {
                reverseDeepMerge(dest[srcArg], src[srcArg]);
            }
        }
    });
    return dest;
}
// check a value is null or undefined
export function isNil(value) {
    return value == null;
}
export function isUndefined(value) {
    return value === undefined;
}
export function isBlankString(value) {
    return value === '';
}
export function isFunction(value) {
    return typeof value === 'function';
}
export function objAndSameType(obj1, obj2) {
    return (isObject(obj1) &&
        isObject(obj2) &&
        Object.getPrototypeOf(obj1) === Object.getPrototypeOf(obj2) &&
        !(Array.isArray(obj1) || Array.isArray(obj2)));
}
export function isObject(x) {
    return x != null && typeof x === 'object';
}
export function isPromise(obj) {
    return !!obj && typeof obj.then === 'function';
}
export function clone(value) {
    if (!isObject(value) ||
        isObservable(value) ||
        /* instanceof SafeHtmlImpl */ value.changingThisBreaksApplicationSecurity ||
        ['RegExp', 'FileList', 'File', 'Blob'].indexOf(value.constructor.name) !== -1) {
        return value;
    }
    // https://github.com/moment/moment/blob/master/moment.js#L252
    if (value._isAMomentObject && isFunction(value.clone)) {
        return value.clone();
    }
    if (value instanceof AbstractControl) {
        return null;
    }
    if (value instanceof Date) {
        return new Date(value.getTime());
    }
    if (Array.isArray(value)) {
        return value.slice(0).map(function (v) { return clone(v); });
    }
    // best way to clone a js object maybe
    // https://stackoverflow.com/questions/41474986/how-to-clone-a-javascript-es6-class-instance
    var proto = Object.getPrototypeOf(value);
    var c = Object.create(proto);
    c = Object.setPrototypeOf(c, proto);
    // need to make a deep copy so we dont use Object.assign
    // also Object.assign wont copy property descriptor exactly
    return Object.keys(value).reduce(function (newVal, prop) {
        var propDesc = Object.getOwnPropertyDescriptor(value, prop);
        if (propDesc.get) {
            Object.defineProperty(newVal, prop, propDesc);
        }
        else {
            newVal[prop] = clone(value[prop]);
        }
        return newVal;
    }, c);
}
export function defineHiddenProp(field, prop, defaultValue) {
    Object.defineProperty(field, prop, { enumerable: false, writable: true, configurable: true });
    field[prop] = defaultValue;
}
export function observeDeep(_a) {
    var source = _a.source, paths = _a.paths, target = _a.target, setFn = _a.setFn;
    var observers = [];
    if (paths.length === 0) {
        target = source;
    }
    Object.keys(target).forEach(function (path) {
        var unsubscribe = function () { };
        var observer = observe(source, __spread(paths, [path]), function (_a) {
            var firstChange = _a.firstChange, currentValue = _a.currentValue;
            !firstChange && setFn();
            unsubscribe();
            var i = observers.indexOf(unsubscribe);
            if (i > -1) {
                observers.splice(i, 1);
            }
            if (isObject(currentValue) && currentValue.constructor.name === 'Object') {
                unsubscribe = observeDeep({ source: source, setFn: setFn, paths: __spread(paths, [path]), target: currentValue });
                observers.push(unsubscribe);
            }
        });
        observers.push(function () { return observer.unsubscribe(); });
    });
    return function () {
        observers.forEach(function (observer) { return observer(); });
    };
}
export function observe(o, paths, setFn) {
    if (!o._observers) {
        defineHiddenProp(o, '_observers', {});
    }
    var target = o;
    for (var i = 0; i < paths.length - 1; i++) {
        if (!target[paths[i]] || !isObject(target[paths[i]])) {
            target[paths[i]] = /^\d+$/.test(paths[i + 1]) ? [] : {};
        }
        target = target[paths[i]];
    }
    var key = paths[paths.length - 1];
    var prop = paths.join('.');
    if (!o._observers[prop]) {
        o._observers[prop] = { value: target[key], onChange: [] };
    }
    var state = o._observers[prop];
    if (state.onChange.indexOf(setFn) === -1) {
        state.onChange.push(setFn);
        setFn({ currentValue: state.value, firstChange: true });
        if (state.onChange.length === 1) {
            var enumerable = (Object.getOwnPropertyDescriptor(target, key) || { enumerable: true }).enumerable;
            Object.defineProperty(target, key, {
                enumerable: enumerable,
                configurable: true,
                get: function () { return state.value; },
                set: function (currentValue) {
                    if (currentValue !== state.value) {
                        var previousValue_1 = state.value;
                        state.value = currentValue;
                        state.onChange.forEach(function (changeFn) { return changeFn({ previousValue: previousValue_1, currentValue: currentValue, firstChange: false }); });
                    }
                },
            });
        }
    }
    return {
        setValue: function (value) {
            state.value = value;
        },
        unsubscribe: function () {
            state.onChange = state.onChange.filter(function (changeFn) { return changeFn !== setFn; });
        },
    };
}
export function reduceFormUpdateValidityCalls(form, action) {
    var updateValidity = form._updateTreeValidity.bind(form);
    var updateValidityArgs = null;
    form._updateTreeValidity = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return (updateValidityArgs = args);
    };
    action();
    updateValidityArgs && updateValidity(updateValidityArgs);
    form._updateTreeValidity = updateValidity;
}
//# sourceMappingURL=data:application/json;base64,