{"version":3,"file":"ngx-formly-core-json-schema.js","sources":["ng://@ngx-formly/core/json-schema/formly-json-schema.service.ts","ng://@ngx-formly/core/json-schema/ngx-formly-core-json-schema.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { FormlyFieldConfig } from '@ngx-formly/core';\nimport { JSONSchema7, JSONSchema7TypeName } from 'json-schema';\nimport { AbstractControl, FormControl } from '@angular/forms';\nimport {\n  ɵdefineHiddenProp as defineHiddenProp,\n  ɵreverseDeepMerge as reverseDeepMerge,\n  ɵgetFieldInitialValue as getFieldInitialValue,\n} from '@ngx-formly/core';\n\nexport interface FormlyJsonschemaOptions {\n  /**\n   * allows to intercept the mapping, taking the already mapped\n   * formly field and the original JSONSchema source from which it\n   * was mapped.\n   */\n  map?: (mappedField: FormlyFieldConfig, mapSource: JSONSchema7) => FormlyFieldConfig;\n}\n\nfunction isEmpty(v: any) {\n  return v === '' || v == null;\n}\n\nfunction isConst(schema: JSONSchema7) {\n  return schema.hasOwnProperty('const') || (schema.enum && schema.enum.length === 1);\n}\n\nfunction totalMatchedFields(field: FormlyFieldConfig): number {\n  if (field.key && !field.fieldGroup) {\n    return getFieldInitialValue(field) !== undefined ? 1 : 0;\n  }\n\n  return field.fieldGroup.reduce((s, f) => totalMatchedFields(f) + s, 0);\n}\n\nfunction isFieldValid(field: FormlyFieldConfig): boolean {\n  if (field.key) {\n    return field.formControl.valid;\n  }\n\n  return field.fieldGroup.every((f) => isFieldValid(f));\n}\n\ninterface IOptions extends FormlyJsonschemaOptions {\n  schema: JSONSchema7;\n  autoClear?: boolean;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class FormlyJsonschema {\n  toFieldConfig(schema: JSONSchema7, options?: FormlyJsonschemaOptions): FormlyFieldConfig {\n    return this._toFieldConfig(schema, { schema, ...(options || {}) });\n  }\n\n  private _toFieldConfig(schema: JSONSchema7, options: IOptions): FormlyFieldConfig {\n    schema = this.resolveSchema(schema, options);\n\n    let field: FormlyFieldConfig = {\n      type: this.guessType(schema),\n      defaultValue: schema.default,\n      templateOptions: {\n        label: schema.title,\n        readonly: schema.readOnly,\n        description: schema.description,\n      },\n    };\n\n    if (options.autoClear) {\n      field['autoClear'] = true;\n    }\n\n    switch (field.type) {\n      case 'null': {\n        this.addValidator(field, 'null', ({ value }) => value === null);\n        break;\n      }\n      case 'number':\n      case 'integer': {\n        field.parsers = [(v) => (isEmpty(v) ? null : Number(v))];\n        if (schema.hasOwnProperty('minimum')) {\n          field.templateOptions.min = schema.minimum;\n        }\n\n        if (schema.hasOwnProperty('maximum')) {\n          field.templateOptions.max = schema.maximum;\n        }\n\n        if (schema.hasOwnProperty('exclusiveMinimum')) {\n          field.templateOptions.exclusiveMinimum = schema.exclusiveMinimum;\n          this.addValidator(\n            field,\n            'exclusiveMinimum',\n            ({ value }) => isEmpty(value) || value > schema.exclusiveMinimum,\n          );\n        }\n\n        if (schema.hasOwnProperty('exclusiveMaximum')) {\n          field.templateOptions.exclusiveMaximum = schema.exclusiveMaximum;\n          this.addValidator(\n            field,\n            'exclusiveMaximum',\n            ({ value }) => isEmpty(value) || value < schema.exclusiveMaximum,\n          );\n        }\n\n        if (schema.hasOwnProperty('multipleOf')) {\n          field.templateOptions.step = schema.multipleOf;\n          this.addValidator(field, 'multipleOf', ({ value }) => isEmpty(value) || (Math.floor(value*1000) % Math.floor(schema.multipleOf*1000)) === 0);\n        }\n        break;\n      }\n      case 'string': {\n        const schemaType = schema.type as JSONSchema7TypeName;\n        if (Array.isArray(schemaType) && schemaType.indexOf('null') !== -1) {\n          field.parsers = [(v) => (isEmpty(v) ? null : v)];\n        }\n\n        ['minLength', 'maxLength', 'pattern'].forEach((prop) => {\n          if (schema.hasOwnProperty(prop)) {\n            field.templateOptions[prop] = schema[prop];\n          }\n        });\n        break;\n      }\n      case 'object': {\n        field.fieldGroup = [];\n\n        const [propDeps, schemaDeps] = this.resolveDependencies(schema);\n        Object.keys(schema.properties || {}).forEach((key) => {\n          const f = this._toFieldConfig(<JSONSchema7>schema.properties[key], options);\n          field.fieldGroup.push(f);\n          f.key = key;\n          if (Array.isArray(schema.required) && schema.required.indexOf(key) !== -1) {\n            f.templateOptions.required = true;\n          }\n          if (f.templateOptions && !f.templateOptions.required && propDeps[key]) {\n            f.expressionProperties = {\n              'templateOptions.required': (m) => m && propDeps[key].some((k) => !isEmpty(m[k])),\n            };\n          }\n\n          if (schemaDeps[key]) {\n            const getConstValue = (s: JSONSchema7) => {\n              return s.hasOwnProperty('const') ? s.const : s.enum[0];\n            };\n\n            const oneOfSchema = schemaDeps[key].oneOf;\n            if (\n              oneOfSchema &&\n              oneOfSchema.every((o) => o.properties && o.properties[key] && isConst(o.properties[key]))\n            ) {\n              oneOfSchema.forEach((oneOfSchemaItem) => {\n                const { [key]: constSchema, ...properties } = oneOfSchemaItem.properties;\n                field.fieldGroup.push({\n                  ...this._toFieldConfig({ ...oneOfSchemaItem, properties }, { ...options, autoClear: true }),\n                  hideExpression: (m) => !m || getConstValue(constSchema) !== m[key],\n                });\n              });\n            } else {\n              field.fieldGroup.push({\n                ...this._toFieldConfig(schemaDeps[key], options),\n                hideExpression: (m) => !m || isEmpty(m[key]),\n              });\n            }\n          }\n        });\n\n        if (schema.oneOf) {\n          field.fieldGroup.push(this.resolveMultiSchema('oneOf', <JSONSchema7[]>schema.oneOf, options));\n        }\n\n        if (schema.anyOf) {\n          field.fieldGroup.push(this.resolveMultiSchema('anyOf', <JSONSchema7[]>schema.anyOf, options));\n        }\n        break;\n      }\n      case 'array': {\n        if (schema.hasOwnProperty('minItems')) {\n          field.templateOptions.minItems = schema.minItems;\n          this.addValidator(field, 'minItems', ({ value }) => isEmpty(value) || value.length >= schema.minItems);\n        }\n        if (schema.hasOwnProperty('maxItems')) {\n          field.templateOptions.maxItems = schema.maxItems;\n          this.addValidator(field, 'maxItems', ({ value }) => isEmpty(value) || value.length <= schema.maxItems);\n        }\n        if (schema.hasOwnProperty('uniqueItems')) {\n          field.templateOptions.uniqueItems = schema.uniqueItems;\n          this.addValidator(field, 'uniqueItems', ({ value }) => {\n            if (isEmpty(value) || !schema.uniqueItems) {\n              return true;\n            }\n\n            const uniqueItems = Array.from(new Set(value.map((v: any) => JSON.stringify(v))));\n\n            return uniqueItems.length === value.length;\n          });\n        }\n\n        // resolve items schema needed for isEnum check\n        if (schema.items && !Array.isArray(schema.items)) {\n          schema.items = this.resolveSchema(<JSONSchema7>schema.items, options);\n        }\n\n        // TODO: remove isEnum check once adding an option to skip extension\n        if (!this.isEnum(schema)) {\n          const _this = this;\n          Object.defineProperty(field, 'fieldArray', {\n            get() {\n              if (!Array.isArray(schema.items)) {\n                // When items is a single schema, the additionalItems keyword is meaningless, and it should not be used.\n                return _this._toFieldConfig(<JSONSchema7>schema.items, options);\n              }\n\n              const length = this.fieldGroup ? this.fieldGroup.length : 0;\n              const itemSchema = schema.items[length] ? schema.items[length] : schema.additionalItems;\n\n              return itemSchema ? _this._toFieldConfig(<JSONSchema7>itemSchema, options) : {};\n            },\n            enumerable: true,\n            configurable: true,\n          });\n        }\n\n        break;\n      }\n    }\n\n    if (schema.hasOwnProperty('const')) {\n      field.templateOptions.const = schema.const;\n      this.addValidator(field, 'const', ({ value }) => value === schema.const);\n      if (!field.type) {\n        field.defaultValue = schema.const;\n      }\n    }\n\n    if (this.isEnum(schema)) {\n      field.templateOptions.multiple = field.type === 'array';\n      field.type = 'enum';\n      field.templateOptions.options = this.toEnumOptions(schema);\n    }\n\n    // map in possible formlyConfig options from the widget property\n    if (schema['widget'] && schema['widget'].formlyConfig) {\n      field = reverseDeepMerge(schema['widget'].formlyConfig, field);\n    }\n\n    // if there is a map function passed in, use it to allow the user to\n    // further customize how fields are being mapped\n    return options.map ? options.map(field, schema) : field;\n  }\n\n  private resolveSchema(schema: JSONSchema7, options: IOptions) {\n    if (schema.$ref) {\n      schema = this.resolveDefinition(schema, options);\n    }\n\n    if (schema.allOf) {\n      schema = this.resolveAllOf(schema, options);\n    }\n\n    return schema;\n  }\n\n  private resolveAllOf({ allOf, ...baseSchema }: JSONSchema7, options: IOptions) {\n    if (!allOf.length) {\n      throw Error(`allOf array can not be empty ${allOf}.`);\n    }\n\n    return allOf.reduce((base: JSONSchema7, schema: JSONSchema7) => {\n      schema = this.resolveSchema(schema, options);\n      if (base.required && schema.required) {\n        base.required = [...base.required, ...schema.required];\n      }\n\n      if (schema.uniqueItems) {\n        base.uniqueItems = schema.uniqueItems;\n      }\n\n      // resolve to min value\n      ['maxLength', 'maximum', 'exclusiveMaximum', 'maxItems', 'maxProperties'].forEach((prop) => {\n        if (!isEmpty(base[prop]) && !isEmpty(schema[prop])) {\n          base[prop] = base[prop] < schema[prop] ? base[prop] : schema[prop];\n        }\n      });\n\n      // resolve to max value\n      ['minLength', 'minimum', 'exclusiveMinimum', 'minItems', 'minProperties'].forEach((prop) => {\n        if (!isEmpty(base[prop]) && !isEmpty(schema[prop])) {\n          base[prop] = base[prop] > schema[prop] ? base[prop] : schema[prop];\n        }\n      });\n\n      return reverseDeepMerge(base, schema);\n    }, baseSchema);\n  }\n\n  private resolveMultiSchema(mode: 'oneOf' | 'anyOf', schemas: JSONSchema7[], options: IOptions): FormlyFieldConfig {\n    return {\n      type: 'multischema',\n      fieldGroup: [\n        {\n          type: 'enum',\n          templateOptions: {\n            multiple: mode === 'anyOf',\n            options: schemas.map((s, i) => ({ label: s.title, value: i })),\n          },\n        },\n        {\n          fieldGroup: schemas.map((s, i) => ({\n            ...this._toFieldConfig(s, { ...options, autoClear: true }),\n            hideExpression: (m, fs, f) => {\n              const selectField = f.parent.parent.fieldGroup[0];\n              if (!selectField.formControl) {\n                const value = f.parent.fieldGroup\n                  .map((f, i) => [f, i] as [FormlyFieldConfig, number])\n                  .filter(([f]) => isFieldValid(f))\n                  .sort(([f1], [f2]) => {\n                    const matchedFields1 = totalMatchedFields(f1);\n                    const matchedFields2 = totalMatchedFields(f2);\n                    if (matchedFields1 === matchedFields2) {\n                      return 0;\n                    }\n\n                    return matchedFields2 > matchedFields1 ? 1 : -1;\n                  })\n                  .map(([, i]) => i);\n\n                const normalizedValue = [value.length === 0 ? 0 : value[0]];\n                const formattedValue = mode === 'anyOf' ? normalizedValue : normalizedValue[0];\n                defineHiddenProp(selectField, 'formControl', new FormControl(formattedValue));\n              }\n\n              const control = selectField.formControl;\n\n              return Array.isArray(control.value) ? control.value.indexOf(i) === -1 : control.value !== i;\n            },\n          })),\n        },\n      ],\n    };\n  }\n\n  private resolveDefinition(schema: JSONSchema7, options: IOptions): JSONSchema7 {\n    const [uri, pointer] = schema.$ref.split('#/');\n    if (uri) {\n      throw Error(`Remote schemas for ${schema.$ref} not supported yet.`);\n    }\n\n    const definition = !pointer\n      ? null\n      : pointer.split('/').reduce((def, path) => (def && def.hasOwnProperty(path) ? def[path] : null), options.schema);\n\n    if (!definition) {\n      throw Error(`Cannot find a definition for ${schema.$ref}.`);\n    }\n\n    if (definition.$ref) {\n      return this.resolveDefinition(definition, options);\n    }\n\n    return {\n      ...definition,\n      ...['title', 'description', 'default'].reduce((annotation, p) => {\n        if (schema.hasOwnProperty(p)) {\n          annotation[p] = schema[p];\n        }\n\n        return annotation;\n      }, {}),\n    };\n  }\n\n  private resolveDependencies(schema: JSONSchema7) {\n    const deps = {};\n    const schemaDeps = {};\n\n    Object.keys(schema.dependencies || {}).forEach((prop) => {\n      const dependency = schema.dependencies[prop] as JSONSchema7;\n      if (Array.isArray(dependency)) {\n        // Property dependencies\n        dependency.forEach((dep) => {\n          if (!deps[dep]) {\n            deps[dep] = [prop];\n          } else {\n            deps[dep].push(prop);\n          }\n        });\n      } else {\n        // schema dependencies\n        schemaDeps[prop] = dependency;\n      }\n    });\n\n    return [deps, schemaDeps];\n  }\n\n  private guessType(schema: JSONSchema7) {\n    const type = schema.type as JSONSchema7TypeName;\n    if (!type && schema.properties) {\n      return 'object';\n    }\n\n    if (Array.isArray(type)) {\n      if (type.length === 1) {\n        return type[0];\n      }\n\n      if (type.length === 2 && type.indexOf('null') !== -1) {\n        return type[type[0] === 'null' ? 1 : 0];\n      }\n    }\n\n    return type;\n  }\n\n  private addValidator(field: FormlyFieldConfig, name: string, validator: (control: AbstractControl) => boolean) {\n    field.validators = field.validators || {};\n    field.validators[name] = validator;\n  }\n\n  private isEnum(schema: JSONSchema7) {\n    return (\n      schema.enum ||\n      (schema.anyOf && schema.anyOf.every(isConst)) ||\n      (schema.oneOf && schema.oneOf.every(isConst)) ||\n      (schema.uniqueItems && schema.items && !Array.isArray(schema.items) && this.isEnum(<JSONSchema7>schema.items))\n    );\n  }\n\n  private toEnumOptions(schema: JSONSchema7) {\n    if (schema.enum) {\n      return schema.enum.map((value) => ({ value, label: value }));\n    }\n\n    const toEnum = (s: JSONSchema7) => {\n      const value = s.hasOwnProperty('const') ? s.const : s.enum[0];\n\n      return { value, label: s.title || value };\n    };\n\n    if (schema.anyOf) {\n      return schema.anyOf.map(toEnum);\n    }\n\n    if (schema.oneOf) {\n      return schema.oneOf.map(toEnum);\n    }\n\n    return this.toEnumOptions(<JSONSchema7>schema.items);\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["getFieldInitialValue","reverseDeepMerge","defineHiddenProp"],"mappings":"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"}